{"version":3,"file":"static/js/208.80e782c6.chunk.js","mappings":"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","sources":["../node_modules/dagre-d3-es/src/dagre/data/list.js","../node_modules/dagre-d3-es/src/dagre/greedy-fas.js","../node_modules/dagre-d3-es/src/dagre/acyclic.js","../node_modules/lodash-es/_baseExtremum.js","../node_modules/lodash-es/_baseGt.js","../node_modules/lodash-es/max.js","../node_modules/lodash-es/mapValues.js","../node_modules/lodash-es/_baseLt.js","../node_modules/lodash-es/min.js","../node_modules/lodash-es/now.js","../node_modules/dagre-d3-es/src/dagre/util.js","../node_modules/dagre-d3-es/src/dagre/add-border-segments.js","../node_modules/dagre-d3-es/src/dagre/coordinate-system.js","../node_modules/dagre-d3-es/src/dagre/normalize.js","../node_modules/lodash-es/minBy.js","../node_modules/dagre-d3-es/src/dagre/rank/util.js","../node_modules/dagre-d3-es/src/dagre/rank/feasible-tree.js","../node_modules/dagre-d3-es/src/graphlib/alg/dijkstra.js","../node_modules/dagre-d3-es/src/graphlib/alg/floyd-warshall.js","../node_modules/dagre-d3-es/src/graphlib/alg/topsort.js","../node_modules/dagre-d3-es/src/graphlib/alg/dfs.js","../node_modules/dagre-d3-es/src/dagre/rank/network-simplex.js","../node_modules/dagre-d3-es/src/graphlib/alg/postorder.js","../node_modules/dagre-d3-es/src/graphlib/alg/preorder.js","../node_modules/dagre-d3-es/src/dagre/rank/index.js","../node_modules/dagre-d3-es/src/dagre/nesting-graph.js","../node_modules/lodash-es/cloneDeep.js","../node_modules/dagre-d3-es/src/dagre/order/build-layer-graph.js","../node_modules/lodash-es/_baseZipObject.js","../node_modules/lodash-es/zipObject.js","../node_modules/lodash-es/_baseSortBy.js","../node_modules/lodash-es/_compareAscending.js","../node_modules/lodash-es/_compareMultiple.js","../node_modules/lodash-es/_baseOrderBy.js","../node_modules/lodash-es/sortBy.js","../node_modules/dagre-d3-es/src/dagre/order/cross-count.js","../node_modules/dagre-d3-es/src/dagre/order/resolve-conflicts.js","../node_modules/dagre-d3-es/src/dagre/order/sort.js","../node_modules/dagre-d3-es/src/dagre/order/sort-subgraph.js","../node_modules/dagre-d3-es/src/dagre/order/barycenter.js","../node_modules/dagre-d3-es/src/dagre/order/index.js","../node_modules/dagre-d3-es/src/dagre/order/init-order.js","../node_modules/dagre-d3-es/src/dagre/order/add-subgraph-constraints.js","../node_modules/dagre-d3-es/src/dagre/parent-dummy-chains.js","../node_modules/lodash-es/forOwn.js","../node_modules/lodash-es/forIn.js","../node_modules/dagre-d3-es/src/dagre/position/bk.js","../node_modules/dagre-d3-es/src/dagre/position/index.js","../node_modules/dagre-d3-es/src/dagre/layout.js","../node_modules/dagre-d3-es/src/graphlib/graph.js","../node_modules/lodash-es/_baseAssign.js","../node_modules/lodash-es/_baseAssignIn.js","../node_modules/lodash-es/_copySymbols.js","../node_modules/lodash-es/_getSymbolsIn.js","../node_modules/lodash-es/_copySymbolsIn.js","../node_modules/lodash-es/_getAllKeysIn.js","../node_modules/lodash-es/_initCloneArray.js","../node_modules/lodash-es/_cloneDataView.js","../node_modules/lodash-es/_cloneRegExp.js","../node_modules/lodash-es/_cloneSymbol.js","../node_modules/lodash-es/_initCloneByTag.js","../node_modules/lodash-es/_baseIsMap.js","../node_modules/lodash-es/isMap.js","../node_modules/lodash-es/_baseIsSet.js","../node_modules/lodash-es/isSet.js","../node_modules/lodash-es/_baseClone.js","../node_modules/lodash-es/defaults.js","../node_modules/lodash-es/_baseHas.js","../node_modules/lodash-es/has.js","../node_modules/lodash-es/_baseRange.js","../node_modules/lodash-es/_createRange.js","../node_modules/lodash-es/range.js","../node_modules/lodash-es/uniqueId.js"],"sourcesContent":["/*\n * Simple doubly linked list implementation derived from Cormen, et al.,\n * \"Introduction to Algorithms\".\n */\n\nexport { List };\n\nclass List {\n  constructor() {\n    var sentinel = {};\n    sentinel._next = sentinel._prev = sentinel;\n    this._sentinel = sentinel;\n  }\n  dequeue() {\n    var sentinel = this._sentinel;\n    var entry = sentinel._prev;\n    if (entry !== sentinel) {\n      unlink(entry);\n      return entry;\n    }\n  }\n  enqueue(entry) {\n    var sentinel = this._sentinel;\n    if (entry._prev && entry._next) {\n      unlink(entry);\n    }\n    entry._next = sentinel._next;\n    sentinel._next._prev = entry;\n    sentinel._next = entry;\n    entry._prev = sentinel;\n  }\n  toString() {\n    var strs = [];\n    var sentinel = this._sentinel;\n    var curr = sentinel._prev;\n    while (curr !== sentinel) {\n      strs.push(JSON.stringify(curr, filterOutLinks));\n      curr = curr._prev;\n    }\n    return '[' + strs.join(', ') + ']';\n  }\n}\n\nfunction unlink(entry) {\n  entry._prev._next = entry._next;\n  entry._next._prev = entry._prev;\n  delete entry._next;\n  delete entry._prev;\n}\n\nfunction filterOutLinks(k, v) {\n  if (k !== '_next' && k !== '_prev') {\n    return v;\n  }\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { List } from './data/list.js';\n\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\nexport { greedyFAS };\n\nvar DEFAULT_WEIGHT_FN = _.constant(1);\n\nfunction greedyFAS(g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return [];\n  }\n  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n\n  // Expand multi-edges\n  return _.flatten(\n    _.map(results, function (e) {\n      return g.outEdges(e.v, e.w);\n    })\n  );\n}\n\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n  var results = [];\n  var sources = buckets[buckets.length - 1];\n  var sinks = buckets[0];\n\n  var entry;\n  while (g.nodeCount()) {\n    while ((entry = sinks.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    while ((entry = sources.dequeue())) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    if (g.nodeCount()) {\n      for (var i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n\n  return results;\n}\n\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n  var results = collectPredecessors ? [] : undefined;\n\n  _.forEach(g.inEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var uEntry = g.node(edge.v);\n\n    if (collectPredecessors) {\n      results.push({ v: edge.v, w: edge.w });\n    }\n\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n\n  _.forEach(g.outEdges(entry.v), function (edge) {\n    var weight = g.edge(edge);\n    var w = edge.w;\n    var wEntry = g.node(w);\n    wEntry['in'] -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n\n  g.removeNode(entry.v);\n\n  return results;\n}\n\nfunction buildState(g, weightFn) {\n  var fasGraph = new Graph();\n  var maxIn = 0;\n  var maxOut = 0;\n\n  _.forEach(g.nodes(), function (v) {\n    fasGraph.setNode(v, { v: v, in: 0, out: 0 });\n  });\n\n  // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n  _.forEach(g.edges(), function (e) {\n    var prevWeight = fasGraph.edge(e.v, e.w) || 0;\n    var weight = weightFn(e);\n    var edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, (fasGraph.node(e.v).out += weight));\n    maxIn = Math.max(maxIn, (fasGraph.node(e.w)['in'] += weight));\n  });\n\n  var buckets = _.range(maxOut + maxIn + 3).map(function () {\n    return new List();\n  });\n  var zeroIdx = maxIn + 1;\n\n  _.forEach(fasGraph.nodes(), function (v) {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n\n  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };\n}\n\nfunction assignBucket(buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry['in']) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry['in'] + zeroIdx].enqueue(entry);\n  }\n}\n","import * as _ from 'lodash-es';\nimport { greedyFAS } from './greedy-fas.js';\n\nexport { run, undo };\n\nfunction run(g) {\n  var fas = g.graph().acyclicer === 'greedy' ? greedyFAS(g, weightFn(g)) : dfsFAS(g);\n  _.forEach(fas, function (e) {\n    var label = g.edge(e);\n    g.removeEdge(e);\n    label.forwardName = e.name;\n    label.reversed = true;\n    g.setEdge(e.w, e.v, label, _.uniqueId('rev'));\n  });\n\n  function weightFn(g) {\n    return function (e) {\n      return g.edge(e).weight;\n    };\n  }\n}\n\nfunction dfsFAS(g) {\n  var fas = [];\n  var stack = {};\n  var visited = {};\n\n  function dfs(v) {\n    if (_.has(visited, v)) {\n      return;\n    }\n    visited[v] = true;\n    stack[v] = true;\n    _.forEach(g.outEdges(v), function (e) {\n      if (_.has(stack, e.w)) {\n        fas.push(e);\n      } else {\n        dfs(e.w);\n      }\n    });\n    delete stack[v];\n  }\n\n  _.forEach(g.nodes(), dfs);\n  return fas;\n}\n\nfunction undo(g) {\n  _.forEach(g.edges(), function (e) {\n    var label = g.edge(e);\n    if (label.reversed) {\n      g.removeEdge(e);\n\n      var forwardName = label.forwardName;\n      delete label.reversed;\n      delete label.forwardName;\n      g.setEdge(e.w, e.v, label, forwardName);\n    }\n  });\n}\n","import isSymbol from './isSymbol.js';\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nexport default baseExtremum;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nexport default baseGt;\n","import baseExtremum from './_baseExtremum.js';\nimport baseGt from './_baseGt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nexport default max;\n","import baseAssignValue from './_baseAssignValue.js';\nimport baseForOwn from './_baseForOwn.js';\nimport baseIteratee from './_baseIteratee.js';\n\n/**\n * Creates an object with the same keys as `object` and values generated\n * by running each own enumerable string keyed property of `object` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, key, object).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns the new mapped object.\n * @see _.mapKeys\n * @example\n *\n * var users = {\n *   'fred':    { 'user': 'fred',    'age': 40 },\n *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n * };\n *\n * _.mapValues(users, function(o) { return o.age; });\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n *\n * // The `_.property` iteratee shorthand.\n * _.mapValues(users, 'age');\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n */\nfunction mapValues(object, iteratee) {\n  var result = {};\n  iteratee = baseIteratee(iteratee, 3);\n\n  baseForOwn(object, function(value, key, object) {\n    baseAssignValue(result, key, iteratee(value, key, object));\n  });\n  return result;\n}\n\nexport default mapValues;\n","/**\n * The base implementation of `_.lt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is less than `other`,\n *  else `false`.\n */\nfunction baseLt(value, other) {\n  return value < other;\n}\n\nexport default baseLt;\n","import baseExtremum from './_baseExtremum.js';\nimport baseLt from './_baseLt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the minimum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * _.min([4, 2, 8, 6]);\n * // => 2\n *\n * _.min([]);\n * // => undefined\n */\nfunction min(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseLt)\n    : undefined;\n}\n\nexport default min;\n","import root from './_root.js';\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nexport default now;\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\n\nexport {\n  addDummyNode,\n  simplify,\n  asNonCompoundGraph,\n  successorWeights,\n  predecessorWeights,\n  intersectRect,\n  buildLayerMatrix,\n  normalizeRanks,\n  removeEmptyRanks,\n  addBorderNode,\n  maxRank,\n  partition,\n  time,\n  notime,\n};\n\n/*\n * Adds a dummy node to the graph and return v.\n */\nfunction addDummyNode(g, type, attrs, name) {\n  var v;\n  do {\n    v = _.uniqueId(name);\n  } while (g.hasNode(v));\n\n  attrs.dummy = type;\n  g.setNode(v, attrs);\n  return v;\n}\n\n/*\n * Returns a new graph with only simple edges. Handles aggregation of data\n * associated with multi-edges.\n */\nfunction simplify(g) {\n  var simplified = new Graph().setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    simplified.setNode(v, g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };\n    var label = g.edge(e);\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen),\n    });\n  });\n  return simplified;\n}\n\nfunction asNonCompoundGraph(g) {\n  var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());\n  _.forEach(g.nodes(), function (v) {\n    if (!g.children(v).length) {\n      simplified.setNode(v, g.node(v));\n    }\n  });\n  _.forEach(g.edges(), function (e) {\n    simplified.setEdge(e, g.edge(e));\n  });\n  return simplified;\n}\n\nfunction successorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var sucs = {};\n    _.forEach(g.outEdges(v), function (e) {\n      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;\n    });\n    return sucs;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\nfunction predecessorWeights(g) {\n  var weightMap = _.map(g.nodes(), function (v) {\n    var preds = {};\n    _.forEach(g.inEdges(v), function (e) {\n      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;\n    });\n    return preds;\n  });\n  return _.zipObject(g.nodes(), weightMap);\n}\n\n/*\n * Finds where a line starting at point ({x, y}) would intersect a rectangle\n * ({x, y, width, height}) if it were pointing at the rectangle's center.\n */\nfunction intersectRect(rect, point) {\n  var x = rect.x;\n  var y = rect.y;\n\n  // Rectangle intersection algorithm from:\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = rect.width / 2;\n  var h = rect.height / 2;\n\n  if (!dx && !dy) {\n    throw new Error('Not possible to find intersection inside of the rectangle');\n  }\n\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    // Intersection is top or bottom of rect.\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = (h * dx) / dy;\n    sy = h;\n  } else {\n    // Intersection is left or right of rect.\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = (w * dy) / dx;\n  }\n\n  return { x: x + sx, y: y + sy };\n}\n\n/*\n * Given a DAG with each node assigned \"rank\" and \"order\" properties, this\n * function will produce a matrix with the ids of each node.\n */\nfunction buildLayerMatrix(g) {\n  var layering = _.map(_.range(maxRank(g) + 1), function () {\n    return [];\n  });\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    var rank = node.rank;\n    if (!_.isUndefined(rank)) {\n      layering[rank][node.order] = v;\n    }\n  });\n  return layering;\n}\n\n/*\n * Adjusts the ranks for all nodes in the graph such that all nodes v have\n * rank(v) >= 0 and at least one node w has rank(w) = 0.\n */\nfunction normalizeRanks(g) {\n  var min = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (_.has(node, 'rank')) {\n      node.rank -= min;\n    }\n  });\n}\n\nfunction removeEmptyRanks(g) {\n  // Ranks may not start at 0, so we need to offset them\n  var offset = _.min(\n    _.map(g.nodes(), function (v) {\n      return g.node(v).rank;\n    })\n  );\n\n  var layers = [];\n  _.forEach(g.nodes(), function (v) {\n    var rank = g.node(v).rank - offset;\n    if (!layers[rank]) {\n      layers[rank] = [];\n    }\n    layers[rank].push(v);\n  });\n\n  var delta = 0;\n  var nodeRankFactor = g.graph().nodeRankFactor;\n  _.forEach(layers, function (vs, i) {\n    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {\n      --delta;\n    } else if (delta) {\n      _.forEach(vs, function (v) {\n        g.node(v).rank += delta;\n      });\n    }\n  });\n}\n\nfunction addBorderNode(g, prefix, rank, order) {\n  var node = {\n    width: 0,\n    height: 0,\n  };\n  if (arguments.length >= 4) {\n    node.rank = rank;\n    node.order = order;\n  }\n  return addDummyNode(g, 'border', node, prefix);\n}\n\nfunction maxRank(g) {\n  return _.max(\n    _.map(g.nodes(), function (v) {\n      var rank = g.node(v).rank;\n      if (!_.isUndefined(rank)) {\n        return rank;\n      }\n    })\n  );\n}\n\n/*\n * Partition a collection into two groups: `lhs` and `rhs`. If the supplied\n * function returns true for an entry it goes into `lhs`. Otherwise it goes\n * into `rhs.\n */\nfunction partition(collection, fn) {\n  var result = { lhs: [], rhs: [] };\n  _.forEach(collection, function (value) {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n  return result;\n}\n\n/*\n * Returns a new function that wraps `fn` with a timer. The wrapper logs the\n * time it takes to execute the function.\n */\nfunction time(name, fn) {\n  var start = _.now();\n  try {\n    return fn();\n  } finally {\n    console.log(name + ' time: ' + (_.now() - start) + 'ms');\n  }\n}\n\nfunction notime(name, fn) {\n  return fn();\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { addBorderSegments };\n\nfunction addBorderSegments(g) {\n  function dfs(v) {\n    var children = g.children(v);\n    var node = g.node(v);\n    if (children.length) {\n      _.forEach(children, dfs);\n    }\n\n    if (_.has(node, 'minRank')) {\n      node.borderLeft = [];\n      node.borderRight = [];\n      for (var rank = node.minRank, maxRank = node.maxRank + 1; rank < maxRank; ++rank) {\n        addBorderNode(g, 'borderLeft', '_bl', v, node, rank);\n        addBorderNode(g, 'borderRight', '_br', v, node, rank);\n      }\n    }\n  }\n\n  _.forEach(g.children(), dfs);\n}\n\nfunction addBorderNode(g, prop, prefix, sg, sgNode, rank) {\n  var label = { width: 0, height: 0, rank: rank, borderType: prop };\n  var prev = sgNode[prop][rank - 1];\n  var curr = util.addDummyNode(g, 'border', label, prefix);\n  sgNode[prop][rank] = curr;\n  g.setParent(curr, sg);\n  if (prev) {\n    g.setEdge(prev, curr, { weight: 1 });\n  }\n}\n","import * as _ from 'lodash-es';\n\nexport { adjust, undo };\n\nfunction adjust(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapWidthHeight(g);\n  }\n}\n\nfunction undo(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === 'bt' || rankDir === 'rl') {\n    reverseY(g);\n  }\n\n  if (rankDir === 'lr' || rankDir === 'rl') {\n    swapXY(g);\n    swapWidthHeight(g);\n  }\n}\n\nfunction swapWidthHeight(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapWidthHeightOne(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    swapWidthHeightOne(g.edge(e));\n  });\n}\n\nfunction swapWidthHeightOne(attrs) {\n  var w = attrs.width;\n  attrs.width = attrs.height;\n  attrs.height = w;\n}\n\nfunction reverseY(g) {\n  _.forEach(g.nodes(), function (v) {\n    reverseYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, reverseYOne);\n    if (_.has(edge, 'y')) {\n      reverseYOne(edge);\n    }\n  });\n}\n\nfunction reverseYOne(attrs) {\n  attrs.y = -attrs.y;\n}\n\nfunction swapXY(g) {\n  _.forEach(g.nodes(), function (v) {\n    swapXYOne(g.node(v));\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, swapXYOne);\n    if (_.has(edge, 'x')) {\n      swapXYOne(edge);\n    }\n  });\n}\n\nfunction swapXYOne(attrs) {\n  var x = attrs.x;\n  attrs.x = attrs.y;\n  attrs.y = x;\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, undo };\n\n/*\n * Breaks any long edges in the graph into short segments that span 1 layer\n * each. This operation is undoable with the denormalize function.\n *\n * Pre-conditions:\n *\n *    1. The input graph is a DAG.\n *    2. Each node in the graph has a \"rank\" property.\n *\n * Post-condition:\n *\n *    1. All edges in the graph have a length of 1.\n *    2. Dummy nodes are added where edges have been split into segments.\n *    3. The graph is augmented with a \"dummyChains\" attribute which contains\n *       the first dummy in each chain of dummy nodes produced.\n */\nfunction run(g) {\n  g.graph().dummyChains = [];\n  _.forEach(g.edges(), function (edge) {\n    normalizeEdge(g, edge);\n  });\n}\n\nfunction normalizeEdge(g, e) {\n  var v = e.v;\n  var vRank = g.node(v).rank;\n  var w = e.w;\n  var wRank = g.node(w).rank;\n  var name = e.name;\n  var edgeLabel = g.edge(e);\n  var labelRank = edgeLabel.labelRank;\n\n  if (wRank === vRank + 1) return;\n\n  g.removeEdge(e);\n\n  var dummy, attrs, i;\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      width: 0,\n      height: 0,\n      edgeLabel: edgeLabel,\n      edgeObj: e,\n      rank: vRank,\n    };\n    dummy = util.addDummyNode(g, 'edge', attrs, '_d');\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width;\n      attrs.height = edgeLabel.height;\n      // @ts-expect-error\n      attrs.dummy = 'edge-label';\n      // @ts-expect-error\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\n    if (i === 0) {\n      g.graph().dummyChains.push(dummy);\n    }\n    v = dummy;\n  }\n\n  g.setEdge(v, w, { weight: edgeLabel.weight }, name);\n}\n\nfunction undo(g) {\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var origLabel = node.edgeLabel;\n    var w;\n    g.setEdge(node.edgeObj, origLabel);\n    while (node.dummy) {\n      w = g.successors(v)[0];\n      g.removeNode(v);\n      origLabel.points.push({ x: node.x, y: node.y });\n      if (node.dummy === 'edge-label') {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n      v = w;\n      node = g.node(v);\n    }\n  });\n}\n","import baseExtremum from './_baseExtremum.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseLt from './_baseLt.js';\n\n/**\n * This method is like `_.min` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * the value is ranked. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * var objects = [{ 'n': 1 }, { 'n': 2 }];\n *\n * _.minBy(objects, function(o) { return o.n; });\n * // => { 'n': 1 }\n *\n * // The `_.property` iteratee shorthand.\n * _.minBy(objects, 'n');\n * // => { 'n': 1 }\n */\nfunction minBy(array, iteratee) {\n  return (array && array.length)\n    ? baseExtremum(array, baseIteratee(iteratee, 2), baseLt)\n    : undefined;\n}\n\nexport default minBy;\n","import * as _ from 'lodash-es';\n\nexport { longestPath, slack };\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n    if (_.has(visited, v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n\n    var rank = _.min(\n      _.map(g.outEdges(v), function (e) {\n        return dfs(e.w) - g.edge(e).minlen;\n      })\n    );\n\n    if (\n      rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n      rank === undefined || // return value of _.map([]) for Lodash 4\n      rank === null\n    ) {\n      // return value of _.map([null])\n      rank = 0;\n    }\n\n    return (label.rank = rank);\n  }\n\n  _.forEach(g.sources(), dfs);\n}\n\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport { slack } from './util.js';\n\nexport { feasibleTree };\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    _.forEach(g.nodeEdges(v), function (e) {\n      var edgeV = e.v,\n        w = v === edgeV ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  _.forEach(t.nodes(), dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function (e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\n\nfunction shiftRanks(t, g, delta) {\n  _.forEach(t.nodes(), function (v) {\n    g.node(v).rank += delta;\n  });\n}\n","import * as _ from 'lodash-es';\nimport { PriorityQueue } from '../data/priority-queue.js';\n\nexport { dijkstra };\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction dijkstra(g, source, weightFn, edgeFn) {\n  return runDijkstra(\n    g,\n    String(source),\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn ||\n      function (v) {\n        return g.outEdges(v);\n      }\n  );\n}\n\nfunction runDijkstra(g, source, weightFn, edgeFn) {\n  var results = {};\n  var pq = new PriorityQueue();\n  var v, vEntry;\n\n  var updateNeighbors = function (edge) {\n    var w = edge.v !== v ? edge.v : edge.w;\n    var wEntry = results[w];\n    var weight = weightFn(edge);\n    var distance = vEntry.distance + weight;\n\n    if (weight < 0) {\n      throw new Error(\n        'dijkstra does not allow negative edge weights. ' +\n          'Bad edge: ' +\n          edge +\n          ' Weight: ' +\n          weight\n      );\n    }\n\n    if (distance < wEntry.distance) {\n      wEntry.distance = distance;\n      wEntry.predecessor = v;\n      pq.decrease(w, distance);\n    }\n  };\n\n  g.nodes().forEach(function (v) {\n    var distance = v === source ? 0 : Number.POSITIVE_INFINITY;\n    results[v] = { distance: distance };\n    pq.add(v, distance);\n  });\n\n  while (pq.size() > 0) {\n    v = pq.removeMin();\n    vEntry = results[v];\n    if (vEntry.distance === Number.POSITIVE_INFINITY) {\n      break;\n    }\n\n    edgeFn(v).forEach(updateNeighbors);\n  }\n\n  return results;\n}\n","import * as _ from 'lodash-es';\n\nexport { floydWarshall };\n\nvar DEFAULT_WEIGHT_FUNC = _.constant(1);\n\nfunction floydWarshall(g, weightFn, edgeFn) {\n  return runFloydWarshall(\n    g,\n    weightFn || DEFAULT_WEIGHT_FUNC,\n    edgeFn ||\n      function (v) {\n        return g.outEdges(v);\n      }\n  );\n}\n\nfunction runFloydWarshall(g, weightFn, edgeFn) {\n  var results = {};\n  var nodes = g.nodes();\n\n  nodes.forEach(function (v) {\n    results[v] = {};\n    results[v][v] = { distance: 0 };\n    nodes.forEach(function (w) {\n      if (v !== w) {\n        results[v][w] = { distance: Number.POSITIVE_INFINITY };\n      }\n    });\n    edgeFn(v).forEach(function (edge) {\n      var w = edge.v === v ? edge.w : edge.v;\n      var d = weightFn(edge);\n      results[v][w] = { distance: d, predecessor: v };\n    });\n  });\n\n  nodes.forEach(function (k) {\n    var rowK = results[k];\n    nodes.forEach(function (i) {\n      var rowI = results[i];\n      nodes.forEach(function (j) {\n        var ik = rowI[k];\n        var kj = rowK[j];\n        var ij = rowI[j];\n        var altDistance = ik.distance + kj.distance;\n        if (altDistance < ij.distance) {\n          ij.distance = altDistance;\n          ij.predecessor = kj.predecessor;\n        }\n      });\n    });\n  });\n\n  return results;\n}\n","import * as _ from 'lodash-es';\n\nexport { topsort, CycleException };\n\ntopsort.CycleException = CycleException;\n\nfunction topsort(g) {\n  var visited = {};\n  var stack = {};\n  var results = [];\n\n  function visit(node) {\n    if (_.has(stack, node)) {\n      throw new CycleException();\n    }\n\n    if (!_.has(visited, node)) {\n      stack[node] = true;\n      visited[node] = true;\n      _.each(g.predecessors(node), visit);\n      delete stack[node];\n      results.push(node);\n    }\n  }\n\n  _.each(g.sinks(), visit);\n\n  if (_.size(visited) !== g.nodeCount()) {\n    throw new CycleException();\n  }\n\n  return results;\n}\n\nfunction CycleException() {}\nCycleException.prototype = new Error(); // must be an instance of Error to pass testing\n","import * as _ from 'lodash-es';\n\nexport { dfs };\n\n/*\n * A helper that preforms a pre- or post-order traversal on the input graph\n * and returns the nodes in the order they were visited. If the graph is\n * undirected then this algorithm will navigate using neighbors. If the graph\n * is directed then this algorithm will navigate using successors.\n *\n * Order must be one of \"pre\" or \"post\".\n */\nfunction dfs(g, vs, order) {\n  if (!_.isArray(vs)) {\n    vs = [vs];\n  }\n\n  var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);\n\n  var acc = [];\n  var visited = {};\n  _.each(vs, function (v) {\n    if (!g.hasNode(v)) {\n      throw new Error('Graph does not have node: ' + v);\n    }\n\n    doDfs(g, v, order === 'post', visited, navigation, acc);\n  });\n  return acc;\n}\n\nfunction doDfs(g, v, postorder, visited, navigation, acc) {\n  if (!_.has(visited, v)) {\n    visited[v] = true;\n\n    if (!postorder) {\n      acc.push(v);\n    }\n    _.each(navigation(v), function (w) {\n      doDfs(g, w, postorder, visited, navigation, acc);\n    });\n    if (postorder) {\n      acc.push(v);\n    }\n  }\n}\n","import * as _ from 'lodash-es';\nimport * as alg from '../../graphlib/alg/index.js';\nimport { simplify } from '../util.js';\nimport { feasibleTree } from './feasible-tree.js';\nimport { longestPath, slack } from './util.js';\n\nexport { networkSimplex };\n\n// Expose some internals for testing purposes\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\n\n/*\n * The network simplex algorithm assigns ranks to each node in the input graph\n * and iteratively improves the ranking to reduce the length of edges.\n *\n * Preconditions:\n *\n *    1. The input graph must be a DAG.\n *    2. All nodes in the graph must have an object value.\n *    3. All edges in the graph must have \"minlen\" and \"weight\" attributes.\n *\n * Postconditions:\n *\n *    1. All nodes in the graph will have an assigned \"rank\" attribute that has\n *       been optimized by the network simplex algorithm. Ranks start at 0.\n *\n *\n * A rough sketch of the algorithm is as follows:\n *\n *    1. Assign initial ranks to each node. We use the longest path algorithm,\n *       which assigns ranks to the lowest position possible. In general this\n *       leads to very wide bottom ranks and unnecessarily long edges.\n *    2. Construct a feasible tight tree. A tight tree is one such that all\n *       edges in the tree have no slack (difference between length of edge\n *       and minlen for the edge). This by itself greatly improves the assigned\n *       rankings by shorting edges.\n *    3. Iteratively find edges that have negative cut values. Generally a\n *       negative cut value indicates that the edge could be removed and a new\n *       tree edge could be added to produce a more compact graph.\n *\n * Much of the algorithms here are derived from Gansner, et al., \"A Technique\n * for Drawing Directed Graphs.\" The structure of the file roughly follows the\n * structure of the overall algorithm.\n */\nfunction networkSimplex(g) {\n  g = simplify(g);\n  longestPath(g);\n  var t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n\n  var e, f;\n  while ((e = leaveEdge(t))) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n}\n\n/*\n * Initializes cut values for all edges in the tree.\n */\nfunction initCutValues(t, g) {\n  var vs = alg.postorder(t, t.nodes());\n  vs = vs.slice(0, vs.length - 1);\n  _.forEach(vs, function (v) {\n    assignCutValue(t, g, v);\n  });\n}\n\nfunction assignCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\n\n/*\n * Given the tight tree, its graph, and a child in the graph calculate and\n * return the cut value for the edge between the child and its parent.\n */\nfunction calcCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  // True if the child is on the tail end of the edge in the directed graph\n  var childIsTail = true;\n  // The graph's view of the tree edge we're inspecting\n  var graphEdge = g.edge(child, parent);\n  // The accumulated cut value for the edge between this node and its parent\n  var cutValue = 0;\n\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n\n  cutValue = graphEdge.weight;\n\n  _.forEach(g.nodeEdges(child), function (e) {\n    var isOutEdge = e.v === child,\n      other = isOutEdge ? e.w : e.v;\n\n    if (other !== parent) {\n      var pointsToHead = isOutEdge === childIsTail,\n        otherWeight = g.edge(e).weight;\n\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n      if (isTreeEdge(t, child, other)) {\n        var otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n\n  return cutValue;\n}\n\nfunction initLowLimValues(tree, root) {\n  if (arguments.length < 2) {\n    root = tree.nodes()[0];\n  }\n  dfsAssignLowLim(tree, {}, 1, root);\n}\n\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n  var low = nextLim;\n  var label = tree.node(v);\n\n  visited[v] = true;\n  _.forEach(tree.neighbors(v), function (w) {\n    if (!_.has(visited, w)) {\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    }\n  });\n\n  label.low = low;\n  label.lim = nextLim++;\n  if (parent) {\n    label.parent = parent;\n  } else {\n    // TODO should be able to remove this when we incrementally update low lim\n    delete label.parent;\n  }\n\n  return nextLim;\n}\n\nfunction leaveEdge(tree) {\n  return _.find(tree.edges(), function (e) {\n    return tree.edge(e).cutvalue < 0;\n  });\n}\n\nfunction enterEdge(t, g, edge) {\n  var v = edge.v;\n  var w = edge.w;\n\n  // For the rest of this function we assume that v is the tail and w is the\n  // head, so if we don't have this edge in the graph we should flip it to\n  // match the correct orientation.\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n\n  var vLabel = t.node(v);\n  var wLabel = t.node(w);\n  var tailLabel = vLabel;\n  var flip = false;\n\n  // If the root is in the tail of the edge then we need to flip the logic that\n  // checks for the head and tail nodes in the candidates function below.\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n\n  var candidates = _.filter(g.edges(), function (edge) {\n    return (\n      flip === isDescendant(t, t.node(edge.v), tailLabel) &&\n      flip !== isDescendant(t, t.node(edge.w), tailLabel)\n    );\n  });\n\n  return _.minBy(candidates, function (edge) {\n    return slack(g, edge);\n  });\n}\n\nfunction exchangeEdges(t, g, e, f) {\n  var v = e.v;\n  var w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n}\n\nfunction updateRanks(t, g) {\n  var root = _.find(t.nodes(), function (v) {\n    return !g.node(v).parent;\n  });\n  var vs = alg.preorder(t, root);\n  vs = vs.slice(1);\n  _.forEach(vs, function (v) {\n    var parent = t.node(v).parent,\n      edge = g.edge(v, parent),\n      flipped = false;\n\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n}\n\n/*\n * Returns true if the edge is in the tree.\n */\nfunction isTreeEdge(tree, u, v) {\n  return tree.hasEdge(u, v);\n}\n\n/*\n * Returns true if the specified node is descendant of the root node per the\n * assigned low and lim attributes in the tree.\n */\nfunction isDescendant(tree, vLabel, rootLabel) {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}\n","import { dfs } from './dfs.js';\n\nexport { postorder };\n\nfunction postorder(g, vs) {\n  return dfs(g, vs, 'post');\n}\n","import { dfs } from './dfs.js';\n\nexport { preorder };\n\nfunction preorder(g, vs) {\n  return dfs(g, vs, 'pre');\n}\n","import { feasibleTree } from './feasible-tree.js';\nimport { networkSimplex } from './network-simplex.js';\nimport { longestPath } from './util.js';\n\nexport { rank };\n\n/*\n * Assigns a rank to each node in the input graph that respects the \"minlen\"\n * constraint specified on edges between nodes.\n *\n * This basic structure is derived from Gansner, et al., \"A Technique for\n * Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a connected DAG\n *    2. Graph nodes must be objects\n *    3. Graph edges must have \"weight\" and \"minlen\" attributes\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have a \"rank\" attribute based on the results of the\n *       algorithm. Ranks can start at any index (including negative), we'll\n *       fix them up later.\n */\nfunction rank(g) {\n  switch (g.graph().ranker) {\n    case 'network-simplex':\n      networkSimplexRanker(g);\n      break;\n    case 'tight-tree':\n      tightTreeRanker(g);\n      break;\n    case 'longest-path':\n      longestPathRanker(g);\n      break;\n    default:\n      networkSimplexRanker(g);\n  }\n}\n\n// A fast and simple ranker, but results are far from optimal.\nvar longestPathRanker = longestPath;\n\nfunction tightTreeRanker(g) {\n  longestPath(g);\n  feasibleTree(g);\n}\n\nfunction networkSimplexRanker(g) {\n  networkSimplex(g);\n}\n","import * as _ from 'lodash-es';\nimport * as util from './util.js';\n\nexport { run, cleanup };\n\n/*\n * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,\n * adds appropriate edges to ensure that all cluster nodes are placed between\n * these boundries, and ensures that the graph is connected.\n *\n * In addition we ensure, through the use of the minlen property, that nodes\n * and subgraph border nodes to not end up on the same rank.\n *\n * Preconditions:\n *\n *    1. Input graph is a DAG\n *    2. Nodes in the input graph has a minlen attribute\n *\n * Postconditions:\n *\n *    1. Input graph is connected.\n *    2. Dummy nodes are added for the tops and bottoms of subgraphs.\n *    3. The minlen attribute for nodes is adjusted to ensure nodes do not\n *       get placed on the same rank as subgraph border nodes.\n *\n * The nesting graph idea comes from Sander, \"Layout of Compound Directed\n * Graphs.\"\n */\nfunction run(g) {\n  var root = util.addDummyNode(g, 'root', {}, '_root');\n  var depths = treeDepths(g);\n  var height = _.max(_.values(depths)) - 1; // Note: depths is an Object not an array\n  var nodeSep = 2 * height + 1;\n\n  g.graph().nestingRoot = root;\n\n  // Multiply minlen by nodeSep to align nodes on non-border ranks.\n  _.forEach(g.edges(), function (e) {\n    g.edge(e).minlen *= nodeSep;\n  });\n\n  // Calculate a weight that is sufficient to keep subgraphs vertically compact\n  var weight = sumWeights(g) + 1;\n\n  // Create border nodes and link them up\n  _.forEach(g.children(), function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  });\n\n  // Save the multiplier for node layers for later removal of empty border\n  // layers.\n  g.graph().nodeRankFactor = nodeSep;\n}\n\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\n  var children = g.children(v);\n  if (!children.length) {\n    if (v !== root) {\n      g.setEdge(root, v, { weight: 0, minlen: nodeSep });\n    }\n    return;\n  }\n\n  var top = util.addBorderNode(g, '_bt');\n  var bottom = util.addBorderNode(g, '_bb');\n  var label = g.node(v);\n\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n\n  _.forEach(children, function (child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n\n    var childNode = g.node(child);\n    var childTop = childNode.borderTop ? childNode.borderTop : child;\n    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    var thisWeight = childNode.borderTop ? weight : 2 * weight;\n    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n\n    g.setEdge(top, childTop, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n\n    g.setEdge(childBottom, bottom, {\n      weight: thisWeight,\n      minlen: minlen,\n      nestingEdge: true,\n    });\n  });\n\n  if (!g.parent(v)) {\n    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });\n  }\n}\n\nfunction treeDepths(g) {\n  var depths = {};\n  function dfs(v, depth) {\n    var children = g.children(v);\n    if (children && children.length) {\n      _.forEach(children, function (child) {\n        dfs(child, depth + 1);\n      });\n    }\n    depths[v] = depth;\n  }\n  _.forEach(g.children(), function (v) {\n    dfs(v, 1);\n  });\n  return depths;\n}\n\nfunction sumWeights(g) {\n  return _.reduce(\n    g.edges(),\n    function (acc, e) {\n      return acc + g.edge(e).weight;\n    },\n    0\n  );\n}\n\nfunction cleanup(g) {\n  var graphLabel = g.graph();\n  g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.nestingEdge) {\n      g.removeEdge(e);\n    }\n  });\n}\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nexport default cloneDeep;\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\n\nexport { buildLayerGraph };\n\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nfunction buildLayerGraph(g, rank, relationship) {\n  var root = createRootNode(g),\n    result = new Graph({ compound: true })\n      .setGraph({ root: root })\n      .setDefaultNodeLabel(function (v) {\n        return g.node(v);\n      });\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v),\n      parent = g.parent(v);\n\n    if (node.rank === rank || (node.minRank <= rank && rank <= node.maxRank)) {\n      result.setNode(v);\n      result.setParent(v, parent || root);\n\n      // This assumes we have only short edges!\n      _.forEach(g[relationship](v), function (e) {\n        var u = e.v === v ? e.w : e.v,\n          edge = result.edge(u, v),\n          weight = !_.isUndefined(edge) ? edge.weight : 0;\n        result.setEdge(u, v, { weight: g.edge(e).weight + weight });\n      });\n\n      if (_.has(node, 'minRank')) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank],\n        });\n      }\n    }\n  });\n\n  return result;\n}\n\nfunction createRootNode(g) {\n  var v;\n  while (g.hasNode((v = _.uniqueId('_root'))));\n  return v;\n}\n","/**\n * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n *\n * @private\n * @param {Array} props The property identifiers.\n * @param {Array} values The property values.\n * @param {Function} assignFunc The function to assign values.\n * @returns {Object} Returns the new object.\n */\nfunction baseZipObject(props, values, assignFunc) {\n  var index = -1,\n      length = props.length,\n      valsLength = values.length,\n      result = {};\n\n  while (++index < length) {\n    var value = index < valsLength ? values[index] : undefined;\n    assignFunc(result, props[index], value);\n  }\n  return result;\n}\n\nexport default baseZipObject;\n","import assignValue from './_assignValue.js';\nimport baseZipObject from './_baseZipObject.js';\n\n/**\n * This method is like `_.fromPairs` except that it accepts two arrays,\n * one of property identifiers and one of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 0.4.0\n * @category Array\n * @param {Array} [props=[]] The property identifiers.\n * @param {Array} [values=[]] The property values.\n * @returns {Object} Returns the new object.\n * @example\n *\n * _.zipObject(['a', 'b'], [1, 2]);\n * // => { 'a': 1, 'b': 2 }\n */\nfunction zipObject(props, values) {\n  return baseZipObject(props || [], values || [], assignValue);\n}\n\nexport default zipObject;\n","/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nexport default baseSortBy;\n","import isSymbol from './isSymbol.js';\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nexport default compareAscending;\n","import compareAscending from './_compareAscending.js';\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nexport default compareMultiple;\n","import arrayMap from './_arrayMap.js';\nimport baseGet from './_baseGet.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport baseSortBy from './_baseSortBy.js';\nimport baseUnary from './_baseUnary.js';\nimport compareMultiple from './_compareMultiple.js';\nimport identity from './identity.js';\nimport isArray from './isArray.js';\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  if (iteratees.length) {\n    iteratees = arrayMap(iteratees, function(iteratee) {\n      if (isArray(iteratee)) {\n        return function(value) {\n          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n        }\n      }\n      return iteratee;\n    });\n  } else {\n    iteratees = [identity];\n  }\n\n  var index = -1;\n  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nexport default baseOrderBy;\n","import baseFlatten from './_baseFlatten.js';\nimport baseOrderBy from './_baseOrderBy.js';\nimport baseRest from './_baseRest.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 30 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, [function(o) { return o.user; }]);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]\n */\nvar sortBy = baseRest(function(collection, iteratees) {\n  if (collection == null) {\n    return [];\n  }\n  var length = iteratees.length;\n  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n    iteratees = [];\n  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n    iteratees = [iteratees[0]];\n  }\n  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n});\n\nexport default sortBy;\n","import * as _ from 'lodash-es';\n\nexport { crossCount };\n\n/*\n * A function that takes a layering (an array of layers, each with an array of\n * ordererd nodes) and a graph and returns a weighted crossing count.\n *\n * Pre-conditions:\n *\n *    1. Input graph must be simple (not a multigraph), directed, and include\n *       only simple edges.\n *    2. Edges in the input graph must have assigned weights.\n *\n * Post-conditions:\n *\n *    1. The graph and layering matrix are left unchanged.\n *\n * This algorithm is derived from Barth, et al., \"Bilayer Cross Counting.\"\n */\nfunction crossCount(g, layering) {\n  var cc = 0;\n  for (var i = 1; i < layering.length; ++i) {\n    cc += twoLayerCrossCount(g, layering[i - 1], layering[i]);\n  }\n  return cc;\n}\n\nfunction twoLayerCrossCount(g, northLayer, southLayer) {\n  // Sort all of the edges between the north and south layers by their position\n  // in the north layer and then the south. Map these edges to the position of\n  // their head in the south layer.\n  var southPos = _.zipObject(\n    southLayer,\n    _.map(southLayer, function (v, i) {\n      return i;\n    })\n  );\n  var southEntries = _.flatten(\n    _.map(northLayer, function (v) {\n      return _.sortBy(\n        _.map(g.outEdges(v), function (e) {\n          return { pos: southPos[e.w], weight: g.edge(e).weight };\n        }),\n        'pos'\n      );\n    })\n  );\n\n  // Build the accumulator tree\n  var firstIndex = 1;\n  while (firstIndex < southLayer.length) firstIndex <<= 1;\n  var treeSize = 2 * firstIndex - 1;\n  firstIndex -= 1;\n  var tree = _.map(new Array(treeSize), function () {\n    return 0;\n  });\n\n  // Calculate the weighted crossings\n  var cc = 0;\n  _.forEach(\n    // @ts-expect-error\n    southEntries.forEach(function (entry) {\n      var index = entry.pos + firstIndex;\n      tree[index] += entry.weight;\n      var weightSum = 0;\n      // @ts-expect-error\n      while (index > 0) {\n        // @ts-expect-error\n        if (index % 2) {\n          weightSum += tree[index + 1];\n        }\n        // @ts-expect-error\n        index = (index - 1) >> 1;\n        tree[index] += entry.weight;\n      }\n      cc += entry.weight * weightSum;\n    })\n  );\n\n  return cc;\n}\n","import * as _ from 'lodash-es';\n\nexport { resolveConflicts };\n\n/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\nfunction resolveConflicts(entries, cg) {\n  var mappedEntries = {};\n  _.forEach(entries, function (entry, i) {\n    var tmp = (mappedEntries[entry.v] = {\n      indegree: 0,\n      in: [],\n      out: [],\n      vs: [entry.v],\n      i: i,\n    });\n    if (!_.isUndefined(entry.barycenter)) {\n      // @ts-expect-error\n      tmp.barycenter = entry.barycenter;\n      // @ts-expect-error\n      tmp.weight = entry.weight;\n    }\n  });\n\n  _.forEach(cg.edges(), function (e) {\n    var entryV = mappedEntries[e.v];\n    var entryW = mappedEntries[e.w];\n    if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  });\n\n  var sourceSet = _.filter(mappedEntries, function (entry) {\n    // @ts-expect-error\n    return !entry.indegree;\n  });\n\n  return doResolveConflicts(sourceSet);\n}\n\nfunction doResolveConflicts(sourceSet) {\n  var entries = [];\n\n  function handleIn(vEntry) {\n    return function (uEntry) {\n      if (uEntry.merged) {\n        return;\n      }\n      if (\n        _.isUndefined(uEntry.barycenter) ||\n        _.isUndefined(vEntry.barycenter) ||\n        uEntry.barycenter >= vEntry.barycenter\n      ) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  }\n\n  function handleOut(vEntry) {\n    return function (wEntry) {\n      wEntry['in'].push(vEntry);\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  }\n\n  while (sourceSet.length) {\n    var entry = sourceSet.pop();\n    entries.push(entry);\n    _.forEach(entry['in'].reverse(), handleIn(entry));\n    _.forEach(entry.out, handleOut(entry));\n  }\n\n  return _.map(\n    _.filter(entries, function (entry) {\n      return !entry.merged;\n    }),\n    function (entry) {\n      return _.pick(entry, ['vs', 'i', 'barycenter', 'weight']);\n    }\n  );\n}\n\nfunction mergeEntries(target, source) {\n  var sum = 0;\n  var weight = 0;\n\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n\n  target.vs = source.vs.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\n\nexport { sort };\n\nfunction sort(entries, biasRight) {\n  var parts = util.partition(entries, function (entry) {\n    return _.has(entry, 'barycenter');\n  });\n  var sortable = parts.lhs,\n    unsortable = _.sortBy(parts.rhs, function (entry) {\n      return -entry.i;\n    }),\n    vs = [],\n    sum = 0,\n    weight = 0,\n    vsIndex = 0;\n\n  sortable.sort(compareWithBias(!!biasRight));\n\n  vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n\n  _.forEach(sortable, function (entry) {\n    vsIndex += entry.vs.length;\n    vs.push(entry.vs);\n    sum += entry.barycenter * entry.weight;\n    weight += entry.weight;\n    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n  });\n\n  var result = { vs: _.flatten(vs) };\n  if (weight) {\n    result.barycenter = sum / weight;\n    result.weight = weight;\n  }\n  return result;\n}\n\nfunction consumeUnsortable(vs, unsortable, index) {\n  var last;\n  while (unsortable.length && (last = _.last(unsortable)).i <= index) {\n    unsortable.pop();\n    vs.push(last.vs);\n    index++;\n  }\n  return index;\n}\n\nfunction compareWithBias(bias) {\n  return function (entryV, entryW) {\n    if (entryV.barycenter < entryW.barycenter) {\n      return -1;\n    } else if (entryV.barycenter > entryW.barycenter) {\n      return 1;\n    }\n\n    return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;\n  };\n}\n","import * as _ from 'lodash-es';\nimport { barycenter } from './barycenter.js';\nimport { resolveConflicts } from './resolve-conflicts.js';\nimport { sort } from './sort.js';\n\nexport { sortSubgraph };\n\nfunction sortSubgraph(g, v, cg, biasRight) {\n  var movable = g.children(v);\n  var node = g.node(v);\n  var bl = node ? node.borderLeft : undefined;\n  var br = node ? node.borderRight : undefined;\n  var subgraphs = {};\n\n  if (bl) {\n    movable = _.filter(movable, function (w) {\n      return w !== bl && w !== br;\n    });\n  }\n\n  var barycenters = barycenter(g, movable);\n  _.forEach(barycenters, function (entry) {\n    if (g.children(entry.v).length) {\n      var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);\n      subgraphs[entry.v] = subgraphResult;\n      if (_.has(subgraphResult, 'barycenter')) {\n        mergeBarycenters(entry, subgraphResult);\n      }\n    }\n  });\n\n  var entries = resolveConflicts(barycenters, cg);\n  expandSubgraphs(entries, subgraphs);\n\n  var result = sort(entries, biasRight);\n\n  if (bl) {\n    result.vs = _.flatten([bl, result.vs, br]);\n    if (g.predecessors(bl).length) {\n      var blPred = g.node(g.predecessors(bl)[0]),\n        brPred = g.node(g.predecessors(br)[0]);\n      if (!_.has(result, 'barycenter')) {\n        result.barycenter = 0;\n        result.weight = 0;\n      }\n      result.barycenter =\n        (result.barycenter * result.weight + blPred.order + brPred.order) / (result.weight + 2);\n      result.weight += 2;\n    }\n  }\n\n  return result;\n}\n\nfunction expandSubgraphs(entries, subgraphs) {\n  _.forEach(entries, function (entry) {\n    entry.vs = _.flatten(\n      entry.vs.map(function (v) {\n        if (subgraphs[v]) {\n          return subgraphs[v].vs;\n        }\n        return v;\n      })\n    );\n  });\n}\n\nfunction mergeBarycenters(target, other) {\n  if (!_.isUndefined(target.barycenter)) {\n    target.barycenter =\n      (target.barycenter * target.weight + other.barycenter * other.weight) /\n      (target.weight + other.weight);\n    target.weight += other.weight;\n  } else {\n    target.barycenter = other.barycenter;\n    target.weight = other.weight;\n  }\n}\n","import * as _ from 'lodash-es';\n\nexport { barycenter };\n\nfunction barycenter(g, movable) {\n  return _.map(movable, function (v) {\n    var inV = g.inEdges(v);\n    if (!inV.length) {\n      return { v: v };\n    } else {\n      var result = _.reduce(\n        inV,\n        function (acc, e) {\n          var edge = g.edge(e),\n            nodeU = g.node(e.v);\n          return {\n            sum: acc.sum + edge.weight * nodeU.order,\n            weight: acc.weight + edge.weight,\n          };\n        },\n        { sum: 0, weight: 0 }\n      );\n\n      return {\n        v: v,\n        barycenter: result.sum / result.weight,\n        weight: result.weight,\n      };\n    }\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\nimport { addSubgraphConstraints } from './add-subgraph-constraints.js';\nimport { buildLayerGraph } from './build-layer-graph.js';\nimport { crossCount } from './cross-count.js';\nimport { initOrder } from './init-order.js';\nimport { sortSubgraph } from './sort-subgraph.js';\n\nexport { order };\n\n/*\n * Applies heuristics to minimize edge crossings in the graph and sets the best\n * order solution as an order attribute on each node.\n *\n * Pre-conditions:\n *\n *    1. Graph must be DAG\n *    2. Graph nodes must be objects with a \"rank\" attribute\n *    3. Graph edges must have the \"weight\" attribute\n *\n * Post-conditions:\n *\n *    1. Graph nodes will have an \"order\" attribute based on the results of the\n *       algorithm.\n */\nfunction order(g) {\n  var maxRank = util.maxRank(g),\n    downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), 'inEdges'),\n    upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), 'outEdges');\n\n  var layering = initOrder(g);\n  assignOrder(g, layering);\n\n  var bestCC = Number.POSITIVE_INFINITY,\n    best;\n\n  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n\n    layering = util.buildLayerMatrix(g);\n    var cc = crossCount(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = _.cloneDeep(layering);\n      bestCC = cc;\n    }\n  }\n\n  assignOrder(g, best);\n}\n\nfunction buildLayerGraphs(g, ranks, relationship) {\n  return _.map(ranks, function (rank) {\n    return buildLayerGraph(g, rank, relationship);\n  });\n}\n\nfunction sweepLayerGraphs(layerGraphs, biasRight) {\n  var cg = new Graph();\n  _.forEach(layerGraphs, function (lg) {\n    var root = lg.graph().root;\n    var sorted = sortSubgraph(lg, root, cg, biasRight);\n    _.forEach(sorted.vs, function (v, i) {\n      lg.node(v).order = i;\n    });\n    addSubgraphConstraints(lg, cg, sorted.vs);\n  });\n}\n\nfunction assignOrder(g, layering) {\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, i) {\n      g.node(v).order = i;\n    });\n  });\n}\n","import * as _ from 'lodash-es';\n\nexport { initOrder };\n\n/*\n * Assigns an initial order value for each node by performing a DFS search\n * starting from nodes in the first rank. Nodes are assigned an order in their\n * rank as they are first visited.\n *\n * This approach comes from Gansner, et al., \"A Technique for Drawing Directed\n * Graphs.\"\n *\n * Returns a layering matrix with an array per layer and each layer sorted by\n * the order of its nodes.\n */\nfunction initOrder(g) {\n  var visited = {};\n  var simpleNodes = _.filter(g.nodes(), function (v) {\n    return !g.children(v).length;\n  });\n  var maxRank = _.max(\n    _.map(simpleNodes, function (v) {\n      return g.node(v).rank;\n    })\n  );\n  var layers = _.map(_.range(maxRank + 1), function () {\n    return [];\n  });\n\n  function dfs(v) {\n    if (_.has(visited, v)) return;\n    visited[v] = true;\n    var node = g.node(v);\n    layers[node.rank].push(v);\n    _.forEach(g.successors(v), dfs);\n  }\n\n  var orderedVs = _.sortBy(simpleNodes, function (v) {\n    return g.node(v).rank;\n  });\n  _.forEach(orderedVs, dfs);\n\n  return layers;\n}\n","import * as _ from 'lodash-es';\n\nexport { addSubgraphConstraints };\n\nfunction addSubgraphConstraints(g, cg, vs) {\n  var prev = {},\n    rootPrev;\n\n  _.forEach(vs, function (v) {\n    var child = g.parent(v),\n      parent,\n      prevChild;\n    while (child) {\n      parent = g.parent(child);\n      if (parent) {\n        prevChild = prev[parent];\n        prev[parent] = child;\n      } else {\n        prevChild = rootPrev;\n        rootPrev = child;\n      }\n      if (prevChild && prevChild !== child) {\n        cg.setEdge(prevChild, child);\n        return;\n      }\n      child = parent;\n    }\n  });\n\n  /*\n  function dfs(v) {\n    var children = v ? g.children(v) : g.children();\n    if (children.length) {\n      var min = Number.POSITIVE_INFINITY,\n          subgraphs = [];\n      _.each(children, function(child) {\n        var childMin = dfs(child);\n        if (g.children(child).length) {\n          subgraphs.push({ v: child, order: childMin });\n        }\n        min = Math.min(min, childMin);\n      });\n      _.reduce(_.sortBy(subgraphs, \"order\"), function(prev, curr) {\n        cg.setEdge(prev.v, curr.v);\n        return curr;\n      });\n      return min;\n    }\n    return g.node(v).order;\n  }\n  dfs(undefined);\n  */\n}\n","import * as _ from 'lodash-es';\n\nexport { parentDummyChains };\n\nfunction parentDummyChains(g) {\n  var postorderNums = postorder(g);\n\n  _.forEach(g.graph().dummyChains, function (v) {\n    var node = g.node(v);\n    var edgeObj = node.edgeObj;\n    var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n    var path = pathData.path;\n    var lca = pathData.lca;\n    var pathIdx = 0;\n    var pathV = path[pathIdx];\n    var ascending = true;\n\n    while (v !== edgeObj.w) {\n      node = g.node(v);\n\n      if (ascending) {\n        while ((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank) {\n          pathIdx++;\n        }\n\n        if (pathV === lca) {\n          ascending = false;\n        }\n      }\n\n      if (!ascending) {\n        while (\n          pathIdx < path.length - 1 &&\n          g.node((pathV = path[pathIdx + 1])).minRank <= node.rank\n        ) {\n          pathIdx++;\n        }\n        pathV = path[pathIdx];\n      }\n\n      g.setParent(v, pathV);\n      v = g.successors(v)[0];\n    }\n  });\n}\n\n// Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\nfunction findPath(g, postorderNums, v, w) {\n  var vPath = [];\n  var wPath = [];\n  var low = Math.min(postorderNums[v].low, postorderNums[w].low);\n  var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n  var parent;\n  var lca;\n\n  // Traverse up from v to find the LCA\n  parent = v;\n  do {\n    parent = g.parent(parent);\n    vPath.push(parent);\n  } while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n  lca = parent;\n\n  // Traverse from w to LCA\n  parent = w;\n  while ((parent = g.parent(parent)) !== lca) {\n    wPath.push(parent);\n  }\n\n  return { path: vPath.concat(wPath.reverse()), lca: lca };\n}\n\nfunction postorder(g) {\n  var result = {};\n  var lim = 0;\n\n  function dfs(v) {\n    var low = lim;\n    _.forEach(g.children(v), dfs);\n    result[v] = { low: low, lim: lim++ };\n  }\n  _.forEach(g.children(), dfs);\n\n  return result;\n}\n","import baseForOwn from './_baseForOwn.js';\nimport castFunction from './_castFunction.js';\n\n/**\n * Iterates over own enumerable string keyed properties of an object and\n * invokes `iteratee` for each property. The iteratee is invoked with three\n * arguments: (value, key, object). Iteratee functions may exit iteration\n * early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 0.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forOwnRight\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forOwn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n */\nfunction forOwn(object, iteratee) {\n  return object && baseForOwn(object, castFunction(iteratee));\n}\n\nexport default forOwn;\n","import baseFor from './_baseFor.js';\nimport castFunction from './_castFunction.js';\nimport keysIn from './keysIn.js';\n\n/**\n * Iterates over own and inherited enumerable string keyed properties of an\n * object and invokes `iteratee` for each property. The iteratee is invoked\n * with three arguments: (value, key, object). Iteratee functions may exit\n * iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 0.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see _.forInRight\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forIn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).\n */\nfunction forIn(object, iteratee) {\n  return object == null\n    ? object\n    : baseFor(object, castFunction(iteratee), keysIn);\n}\n\nexport default forIn;\n","import * as _ from 'lodash-es';\nimport { Graph } from '../../graphlib/index.js';\nimport * as util from '../util.js';\n\n/*\n * This module provides coordinate assignment based on Brandes and Köpf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */\n\nexport {\n  positionX,\n  findType1Conflicts,\n  findType2Conflicts,\n  addConflict,\n  hasConflict,\n  verticalAlignment,\n  horizontalCompaction,\n  alignCoordinates,\n  findSmallestWidthAlignment,\n  balance,\n};\n\n/*\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\n * property. A type-1 conflict is one where a non-inner segment crosses an\n * inner segment. An inner segment is an edge with both incident nodes marked\n * with the \"dummy\" property.\n *\n * This algorithm scans layer by layer, starting with the second, for type-1\n * conflicts between the current layer and the previous layer. For each layer\n * it scans the nodes from left to right until it reaches one that is incident\n * on an inner segment. It then scans predecessors to determine if they have\n * edges that cross that inner segment. At the end a final scan is done for all\n * nodes on the current rank to see if they cross the last visited inner\n * segment.\n *\n * This algorithm (safely) assumes that a dummy node will only be incident on a\n * single node in the layers being scanned.\n */\nfunction findType1Conflicts(g, layering) {\n  var conflicts = {};\n\n  function visitLayer(prevLayer, layer) {\n    var // last visited node in the previous layer that is incident on an inner\n      // segment.\n      k0 = 0,\n      // Tracks the last node in this layer scanned for crossings with a type-1\n      // segment.\n      scanPos = 0,\n      prevLayerLength = prevLayer.length,\n      lastNode = _.last(layer);\n\n    _.forEach(layer, function (v, i) {\n      var w = findOtherInnerSegmentNode(g, v),\n        k1 = w ? g.node(w).order : prevLayerLength;\n\n      if (w || v === lastNode) {\n        _.forEach(layer.slice(scanPos, i + 1), function (scanNode) {\n          _.forEach(g.predecessors(scanNode), function (u) {\n            var uLabel = g.node(u),\n              uPos = uLabel.order;\n            if ((uPos < k0 || k1 < uPos) && !(uLabel.dummy && g.node(scanNode).dummy)) {\n              addConflict(conflicts, u, scanNode);\n            }\n          });\n        });\n        // @ts-expect-error\n        scanPos = i + 1;\n        k0 = k1;\n      }\n    });\n\n    return layer;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findType2Conflicts(g, layering) {\n  var conflicts = {};\n\n  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n    var v;\n    _.forEach(_.range(southPos, southEnd), function (i) {\n      v = south[i];\n      if (g.node(v).dummy) {\n        _.forEach(g.predecessors(v), function (u) {\n          var uNode = g.node(u);\n          if (uNode.dummy && (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {\n            addConflict(conflicts, u, v);\n          }\n        });\n      }\n    });\n  }\n\n  function visitLayer(north, south) {\n    var prevNorthPos = -1,\n      nextNorthPos,\n      southPos = 0;\n\n    _.forEach(south, function (v, southLookahead) {\n      if (g.node(v).dummy === 'border') {\n        var predecessors = g.predecessors(v);\n        if (predecessors.length) {\n          nextNorthPos = g.node(predecessors[0]).order;\n          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n          // @ts-expect-error\n          southPos = southLookahead;\n          prevNorthPos = nextNorthPos;\n        }\n      }\n      scan(south, southPos, south.length, nextNorthPos, north.length);\n    });\n\n    return south;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findOtherInnerSegmentNode(g, v) {\n  if (g.node(v).dummy) {\n    return _.find(g.predecessors(v), function (u) {\n      return g.node(u).dummy;\n    });\n  }\n}\n\nfunction addConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  var conflictsV = conflicts[v];\n  if (!conflictsV) {\n    conflicts[v] = conflictsV = {};\n  }\n  conflictsV[w] = true;\n}\n\nfunction hasConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return _.has(conflicts[v], w);\n}\n\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\n  var root = {},\n    align = {},\n    pos = {};\n\n  // We cache the position here based on the layering because the graph and\n  // layering may be out of sync. The layering matrix is manipulated to\n  // generate different extreme alignments.\n  _.forEach(layering, function (layer) {\n    _.forEach(layer, function (v, order) {\n      root[v] = v;\n      align[v] = v;\n      pos[v] = order;\n    });\n  });\n\n  _.forEach(layering, function (layer) {\n    var prevIdx = -1;\n    _.forEach(layer, function (v) {\n      var ws = neighborFn(v);\n      if (ws.length) {\n        ws = _.sortBy(ws, function (w) {\n          return pos[w];\n        });\n        var mp = (ws.length - 1) / 2;\n        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n          var w = ws[i];\n          if (align[v] === v && prevIdx < pos[w] && !hasConflict(conflicts, v, w)) {\n            align[w] = v;\n            align[v] = root[v] = root[w];\n            prevIdx = pos[w];\n          }\n        }\n      }\n    });\n  });\n\n  return { root: root, align: align };\n}\n\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\n  // This portion of the algorithm differs from BK due to a number of problems.\n  // Instead of their algorithm we construct a new block graph and do two\n  // sweeps. The first sweep places blocks with the smallest possible\n  // coordinates. The second sweep removes unused space by moving blocks to the\n  // greatest coordinates without violating separation.\n  var xs = {},\n    blockG = buildBlockGraph(g, layering, root, reverseSep),\n    borderType = reverseSep ? 'borderLeft' : 'borderRight';\n\n  function iterate(setXsFunc, nextNodesFunc) {\n    var stack = blockG.nodes();\n    var elem = stack.pop();\n    var visited = {};\n    while (elem) {\n      if (visited[elem]) {\n        setXsFunc(elem);\n      } else {\n        visited[elem] = true;\n        stack.push(elem);\n        stack = stack.concat(nextNodesFunc(elem));\n      }\n\n      elem = stack.pop();\n    }\n  }\n\n  // First pass, assign smallest coordinates\n  function pass1(elem) {\n    xs[elem] = blockG.inEdges(elem).reduce(function (acc, e) {\n      return Math.max(acc, xs[e.v] + blockG.edge(e));\n    }, 0);\n  }\n\n  // Second pass, assign greatest coordinates\n  function pass2(elem) {\n    var min = blockG.outEdges(elem).reduce(function (acc, e) {\n      return Math.min(acc, xs[e.w] - blockG.edge(e));\n    }, Number.POSITIVE_INFINITY);\n\n    var node = g.node(elem);\n    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {\n      xs[elem] = Math.max(xs[elem], min);\n    }\n  }\n\n  iterate(pass1, blockG.predecessors.bind(blockG));\n  iterate(pass2, blockG.successors.bind(blockG));\n\n  // Assign x coordinates to all nodes\n  _.forEach(align, function (v) {\n    xs[v] = xs[root[v]];\n  });\n\n  return xs;\n}\n\nfunction buildBlockGraph(g, layering, root, reverseSep) {\n  var blockGraph = new Graph(),\n    graphLabel = g.graph(),\n    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n\n  _.forEach(layering, function (layer) {\n    var u;\n    _.forEach(layer, function (v) {\n      var vRoot = root[v];\n      blockGraph.setNode(vRoot);\n      if (u) {\n        var uRoot = root[u],\n          prevMax = blockGraph.edge(uRoot, vRoot);\n        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n      }\n      u = v;\n    });\n  });\n\n  return blockGraph;\n}\n\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */\nfunction findSmallestWidthAlignment(g, xss) {\n  return _.minBy(_.values(xss), function (xs) {\n    var max = Number.NEGATIVE_INFINITY;\n    var min = Number.POSITIVE_INFINITY;\n\n    _.forIn(xs, function (x, v) {\n      var halfWidth = width(g, v) / 2;\n\n      max = Math.max(x + halfWidth, max);\n      min = Math.min(x - halfWidth, min);\n    });\n\n    return max - min;\n  });\n}\n\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */\nfunction alignCoordinates(xss, alignTo) {\n  var alignToVals = _.values(alignTo),\n    alignToMin = _.min(alignToVals),\n    alignToMax = _.max(alignToVals);\n\n  _.forEach(['u', 'd'], function (vert) {\n    _.forEach(['l', 'r'], function (horiz) {\n      var alignment = vert + horiz,\n        xs = xss[alignment],\n        delta;\n      if (xs === alignTo) return;\n\n      var xsVals = _.values(xs);\n      delta = horiz === 'l' ? alignToMin - _.min(xsVals) : alignToMax - _.max(xsVals);\n\n      if (delta) {\n        xss[alignment] = _.mapValues(xs, function (x) {\n          return x + delta;\n        });\n      }\n    });\n  });\n}\n\nfunction balance(xss, align) {\n  return _.mapValues(xss.ul, function (ignore, v) {\n    if (align) {\n      return xss[align.toLowerCase()][v];\n    } else {\n      var xs = _.sortBy(_.map(xss, v));\n      return (xs[1] + xs[2]) / 2;\n    }\n  });\n}\n\nfunction positionX(g) {\n  var layering = util.buildLayerMatrix(g);\n  var conflicts = _.merge(findType1Conflicts(g, layering), findType2Conflicts(g, layering));\n\n  var xss = {};\n  var adjustedLayering;\n  _.forEach(['u', 'd'], function (vert) {\n    adjustedLayering = vert === 'u' ? layering : _.values(layering).reverse();\n    _.forEach(['l', 'r'], function (horiz) {\n      if (horiz === 'r') {\n        adjustedLayering = _.map(adjustedLayering, function (inner) {\n          return _.values(inner).reverse();\n        });\n      }\n\n      var neighborFn = (vert === 'u' ? g.predecessors : g.successors).bind(g);\n      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n      var xs = horizontalCompaction(g, adjustedLayering, align.root, align.align, horiz === 'r');\n      if (horiz === 'r') {\n        xs = _.mapValues(xs, function (x) {\n          return -x;\n        });\n      }\n      xss[vert + horiz] = xs;\n    });\n  });\n\n  var smallestWidth = findSmallestWidthAlignment(g, xss);\n  alignCoordinates(xss, smallestWidth);\n  return balance(xss, g.graph().align);\n}\n\nfunction sep(nodeSep, edgeSep, reverseSep) {\n  return function (g, v, w) {\n    var vLabel = g.node(v);\n    var wLabel = g.node(w);\n    var sum = 0;\n    var delta;\n\n    sum += vLabel.width / 2;\n    if (_.has(vLabel, 'labelpos')) {\n      switch (vLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = -vLabel.width / 2;\n          break;\n        case 'r':\n          delta = vLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n\n    sum += wLabel.width / 2;\n    if (_.has(wLabel, 'labelpos')) {\n      switch (wLabel.labelpos.toLowerCase()) {\n        case 'l':\n          delta = wLabel.width / 2;\n          break;\n        case 'r':\n          delta = -wLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    return sum;\n  };\n}\n\nfunction width(g, v) {\n  return g.node(v).width;\n}\n","import * as _ from 'lodash-es';\nimport * as util from '../util.js';\nimport { positionX } from './bk.js';\n\nexport { position };\n\nfunction position(g) {\n  g = util.asNonCompoundGraph(g);\n\n  positionY(g);\n  _.forOwn(positionX(g), function (x, v) {\n    g.node(v).x = x;\n  });\n}\n\nfunction positionY(g) {\n  var layering = util.buildLayerMatrix(g);\n  var rankSep = g.graph().ranksep;\n  var prevY = 0;\n  _.forEach(layering, function (layer) {\n    var maxHeight = _.max(\n      _.map(layer, function (v) {\n        return g.node(v).height;\n      })\n    );\n    _.forEach(layer, function (v) {\n      g.node(v).y = prevY + maxHeight / 2;\n    });\n    prevY += maxHeight + rankSep;\n  });\n}\n","import * as _ from 'lodash-es';\nimport { Graph } from '../graphlib/index.js';\nimport { addBorderSegments } from './add-border-segments.js';\nimport * as coordinateSystem from './coordinate-system.js';\nimport * as acyclic from './acyclic.js';\nimport * as normalize from './normalize.js';\nimport { rank } from './rank/index.js';\nimport * as nestingGraph from './nesting-graph.js';\nimport { order } from './order/index.js';\nimport { parentDummyChains } from './parent-dummy-chains.js';\nimport { position } from './position/index.js';\nimport * as util from './util.js';\n\nexport { layout };\n\nfunction layout(g, opts) {\n  var time = opts && opts.debugTiming ? util.time : util.notime;\n  time('layout', function () {\n    var layoutGraph = time('  buildLayoutGraph', function () {\n      return buildLayoutGraph(g);\n    });\n    time('  runLayout', function () {\n      runLayout(layoutGraph, time);\n    });\n    time('  updateInputGraph', function () {\n      updateInputGraph(g, layoutGraph);\n    });\n  });\n}\n\nfunction runLayout(g, time) {\n  time('    makeSpaceForEdgeLabels', function () {\n    makeSpaceForEdgeLabels(g);\n  });\n  time('    removeSelfEdges', function () {\n    removeSelfEdges(g);\n  });\n  time('    acyclic', function () {\n    acyclic.run(g);\n  });\n  time('    nestingGraph.run', function () {\n    nestingGraph.run(g);\n  });\n  time('    rank', function () {\n    rank(util.asNonCompoundGraph(g));\n  });\n  time('    injectEdgeLabelProxies', function () {\n    injectEdgeLabelProxies(g);\n  });\n  time('    removeEmptyRanks', function () {\n    util.removeEmptyRanks(g);\n  });\n  time('    nestingGraph.cleanup', function () {\n    nestingGraph.cleanup(g);\n  });\n  time('    normalizeRanks', function () {\n    util.normalizeRanks(g);\n  });\n  time('    assignRankMinMax', function () {\n    assignRankMinMax(g);\n  });\n  time('    removeEdgeLabelProxies', function () {\n    removeEdgeLabelProxies(g);\n  });\n  time('    normalize.run', function () {\n    normalize.run(g);\n  });\n  time('    parentDummyChains', function () {\n    parentDummyChains(g);\n  });\n  time('    addBorderSegments', function () {\n    addBorderSegments(g);\n  });\n  time('    order', function () {\n    order(g);\n  });\n  time('    insertSelfEdges', function () {\n    insertSelfEdges(g);\n  });\n  time('    adjustCoordinateSystem', function () {\n    coordinateSystem.adjust(g);\n  });\n  time('    position', function () {\n    position(g);\n  });\n  time('    positionSelfEdges', function () {\n    positionSelfEdges(g);\n  });\n  time('    removeBorderNodes', function () {\n    removeBorderNodes(g);\n  });\n  time('    normalize.undo', function () {\n    normalize.undo(g);\n  });\n  time('    fixupEdgeLabelCoords', function () {\n    fixupEdgeLabelCoords(g);\n  });\n  time('    undoCoordinateSystem', function () {\n    coordinateSystem.undo(g);\n  });\n  time('    translateGraph', function () {\n    translateGraph(g);\n  });\n  time('    assignNodeIntersects', function () {\n    assignNodeIntersects(g);\n  });\n  time('    reversePoints', function () {\n    reversePointsForReversedEdges(g);\n  });\n  time('    acyclic.undo', function () {\n    acyclic.undo(g);\n  });\n}\n\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction updateInputGraph(inputGraph, layoutGraph) {\n  _.forEach(inputGraph.nodes(), function (v) {\n    var inputLabel = inputGraph.node(v);\n    var layoutLabel = layoutGraph.node(v);\n\n    if (inputLabel) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n\n      if (layoutGraph.children(v).length) {\n        inputLabel.width = layoutLabel.width;\n        inputLabel.height = layoutLabel.height;\n      }\n    }\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var inputLabel = inputGraph.edge(e);\n    var layoutLabel = layoutGraph.edge(e);\n\n    inputLabel.points = layoutLabel.points;\n    if (_.has(layoutLabel, 'x')) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n    }\n  });\n\n  inputGraph.graph().width = layoutGraph.graph().width;\n  inputGraph.graph().height = layoutGraph.graph().height;\n}\n\nvar graphNumAttrs = ['nodesep', 'edgesep', 'ranksep', 'marginx', 'marginy'];\nvar graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: 'tb' };\nvar graphAttrs = ['acyclicer', 'ranker', 'rankdir', 'align'];\nvar nodeNumAttrs = ['width', 'height'];\nvar nodeDefaults = { width: 0, height: 0 };\nvar edgeNumAttrs = ['minlen', 'weight', 'width', 'height', 'labeloffset'];\nvar edgeDefaults = {\n  minlen: 1,\n  weight: 1,\n  width: 0,\n  height: 0,\n  labeloffset: 10,\n  labelpos: 'r',\n};\nvar edgeAttrs = ['labelpos'];\n\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */\nfunction buildLayoutGraph(inputGraph) {\n  var g = new Graph({ multigraph: true, compound: true });\n  var graph = canonicalize(inputGraph.graph());\n\n  g.setGraph(\n    _.merge({}, graphDefaults, selectNumberAttrs(graph, graphNumAttrs), _.pick(graph, graphAttrs))\n  );\n\n  _.forEach(inputGraph.nodes(), function (v) {\n    var node = canonicalize(inputGraph.node(v));\n    g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));\n    g.setParent(v, inputGraph.parent(v));\n  });\n\n  _.forEach(inputGraph.edges(), function (e) {\n    var edge = canonicalize(inputGraph.edge(e));\n    g.setEdge(\n      e,\n      _.merge({}, edgeDefaults, selectNumberAttrs(edge, edgeNumAttrs), _.pick(edge, edgeAttrs))\n    );\n  });\n\n  return g;\n}\n\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */\nfunction makeSpaceForEdgeLabels(g) {\n  var graph = g.graph();\n  graph.ranksep /= 2;\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    edge.minlen *= 2;\n    if (edge.labelpos.toLowerCase() !== 'c') {\n      if (graph.rankdir === 'TB' || graph.rankdir === 'BT') {\n        edge.width += edge.labeloffset;\n      } else {\n        edge.height += edge.labeloffset;\n      }\n    }\n  });\n}\n\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */\nfunction injectEdgeLabelProxies(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.width && edge.height) {\n      var v = g.node(e.v);\n      var w = g.node(e.w);\n      var label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };\n      util.addDummyNode(g, 'edge-proxy', label, '_ep');\n    }\n  });\n}\n\nfunction assignRankMinMax(g) {\n  var maxRank = 0;\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.borderTop) {\n      node.minRank = g.node(node.borderTop).rank;\n      node.maxRank = g.node(node.borderBottom).rank;\n      // @ts-expect-error\n      maxRank = _.max(maxRank, node.maxRank);\n    }\n  });\n  g.graph().maxRank = maxRank;\n}\n\nfunction removeEdgeLabelProxies(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'edge-proxy') {\n      g.edge(node.e).labelRank = node.rank;\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction translateGraph(g) {\n  var minX = Number.POSITIVE_INFINITY;\n  var maxX = 0;\n  var minY = Number.POSITIVE_INFINITY;\n  var maxY = 0;\n  var graphLabel = g.graph();\n  var marginX = graphLabel.marginx || 0;\n  var marginY = graphLabel.marginy || 0;\n\n  function getExtremes(attrs) {\n    var x = attrs.x;\n    var y = attrs.y;\n    var w = attrs.width;\n    var h = attrs.height;\n    minX = Math.min(minX, x - w / 2);\n    maxX = Math.max(maxX, x + w / 2);\n    minY = Math.min(minY, y - h / 2);\n    maxY = Math.max(maxY, y + h / 2);\n  }\n\n  _.forEach(g.nodes(), function (v) {\n    getExtremes(g.node(v));\n  });\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (_.has(edge, 'x')) {\n      getExtremes(edge);\n    }\n  });\n\n  minX -= marginX;\n  minY -= marginY;\n\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    node.x -= minX;\n    node.y -= minY;\n  });\n\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    _.forEach(edge.points, function (p) {\n      p.x -= minX;\n      p.y -= minY;\n    });\n    if (_.has(edge, 'x')) {\n      edge.x -= minX;\n    }\n    if (_.has(edge, 'y')) {\n      edge.y -= minY;\n    }\n  });\n\n  graphLabel.width = maxX - minX + marginX;\n  graphLabel.height = maxY - minY + marginY;\n}\n\nfunction assignNodeIntersects(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    var nodeV = g.node(e.v);\n    var nodeW = g.node(e.w);\n    var p1, p2;\n    if (!edge.points) {\n      edge.points = [];\n      p1 = nodeW;\n      p2 = nodeV;\n    } else {\n      p1 = edge.points[0];\n      p2 = edge.points[edge.points.length - 1];\n    }\n    edge.points.unshift(util.intersectRect(nodeV, p1));\n    edge.points.push(util.intersectRect(nodeW, p2));\n  });\n}\n\nfunction fixupEdgeLabelCoords(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (_.has(edge, 'x')) {\n      if (edge.labelpos === 'l' || edge.labelpos === 'r') {\n        edge.width -= edge.labeloffset;\n      }\n      switch (edge.labelpos) {\n        case 'l':\n          edge.x -= edge.width / 2 + edge.labeloffset;\n          break;\n        case 'r':\n          edge.x += edge.width / 2 + edge.labeloffset;\n          break;\n      }\n    }\n  });\n}\n\nfunction reversePointsForReversedEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    var edge = g.edge(e);\n    if (edge.reversed) {\n      edge.points.reverse();\n    }\n  });\n}\n\nfunction removeBorderNodes(g) {\n  _.forEach(g.nodes(), function (v) {\n    if (g.children(v).length) {\n      var node = g.node(v);\n      var t = g.node(node.borderTop);\n      var b = g.node(node.borderBottom);\n      var l = g.node(_.last(node.borderLeft));\n      var r = g.node(_.last(node.borderRight));\n\n      node.width = Math.abs(r.x - l.x);\n      node.height = Math.abs(b.y - t.y);\n      node.x = l.x + node.width / 2;\n      node.y = t.y + node.height / 2;\n    }\n  });\n\n  _.forEach(g.nodes(), function (v) {\n    if (g.node(v).dummy === 'border') {\n      g.removeNode(v);\n    }\n  });\n}\n\nfunction removeSelfEdges(g) {\n  _.forEach(g.edges(), function (e) {\n    if (e.v === e.w) {\n      var node = g.node(e.v);\n      if (!node.selfEdges) {\n        node.selfEdges = [];\n      }\n      node.selfEdges.push({ e: e, label: g.edge(e) });\n      g.removeEdge(e);\n    }\n  });\n}\n\nfunction insertSelfEdges(g) {\n  var layers = util.buildLayerMatrix(g);\n  _.forEach(layers, function (layer) {\n    var orderShift = 0;\n    _.forEach(layer, function (v, i) {\n      var node = g.node(v);\n      node.order = i + orderShift;\n      _.forEach(node.selfEdges, function (selfEdge) {\n        util.addDummyNode(\n          g,\n          'selfedge',\n          {\n            width: selfEdge.label.width,\n            height: selfEdge.label.height,\n            rank: node.rank,\n            order: i + ++orderShift,\n            e: selfEdge.e,\n            label: selfEdge.label,\n          },\n          '_se'\n        );\n      });\n      delete node.selfEdges;\n    });\n  });\n}\n\nfunction positionSelfEdges(g) {\n  _.forEach(g.nodes(), function (v) {\n    var node = g.node(v);\n    if (node.dummy === 'selfedge') {\n      var selfNode = g.node(node.e.v);\n      var x = selfNode.x + selfNode.width / 2;\n      var y = selfNode.y;\n      var dx = node.x - x;\n      var dy = selfNode.height / 2;\n      g.setEdge(node.e, node.label);\n      g.removeNode(v);\n      node.label.points = [\n        { x: x + (2 * dx) / 3, y: y - dy },\n        { x: x + (5 * dx) / 6, y: y - dy },\n        { x: x + dx, y: y },\n        { x: x + (5 * dx) / 6, y: y + dy },\n        { x: x + (2 * dx) / 3, y: y + dy },\n      ];\n      node.label.x = node.x;\n      node.label.y = node.y;\n    }\n  });\n}\n\nfunction selectNumberAttrs(obj, attrs) {\n  return _.mapValues(_.pick(obj, attrs), Number);\n}\n\nfunction canonicalize(attrs) {\n  var newAttrs = {};\n  _.forEach(attrs, function (v, k) {\n    newAttrs[k.toLowerCase()] = v;\n  });\n  return newAttrs;\n}\n","import * as _ from 'lodash-es';\n\nvar DEFAULT_EDGE_NAME = '\\x00';\nvar GRAPH_NODE = '\\x00';\nvar EDGE_KEY_DELIM = '\\x01';\n\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\n\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\nexport class Graph {\n  constructor(opts = {}) {\n    this._isDirected = _.has(opts, 'directed') ? opts.directed : true;\n    this._isMultigraph = _.has(opts, 'multigraph') ? opts.multigraph : false;\n    this._isCompound = _.has(opts, 'compound') ? opts.compound : false;\n\n    // Label for the graph itself\n    this._label = undefined;\n\n    // Defaults to be set when creating a new node\n    this._defaultNodeLabelFn = _.constant(undefined);\n\n    // Defaults to be set when creating a new edge\n    this._defaultEdgeLabelFn = _.constant(undefined);\n\n    // v -> label\n    this._nodes = {};\n\n    if (this._isCompound) {\n      // v -> parent\n      this._parent = {};\n\n      // v -> children\n      this._children = {};\n      this._children[GRAPH_NODE] = {};\n    }\n\n    // v -> edgeObj\n    this._in = {};\n\n    // u -> v -> Number\n    this._preds = {};\n\n    // v -> edgeObj\n    this._out = {};\n\n    // v -> w -> Number\n    this._sucs = {};\n\n    // e -> edgeObj\n    this._edgeObjs = {};\n\n    // e -> label\n    this._edgeLabels = {};\n  }\n  /* === Graph functions ========= */\n  isDirected() {\n    return this._isDirected;\n  }\n  isMultigraph() {\n    return this._isMultigraph;\n  }\n  isCompound() {\n    return this._isCompound;\n  }\n  setGraph(label) {\n    this._label = label;\n    return this;\n  }\n  graph() {\n    return this._label;\n  }\n  /* === Node functions ========== */\n  setDefaultNodeLabel(newDefault) {\n    if (!_.isFunction(newDefault)) {\n      newDefault = _.constant(newDefault);\n    }\n    this._defaultNodeLabelFn = newDefault;\n    return this;\n  }\n  nodeCount() {\n    return this._nodeCount;\n  }\n  nodes() {\n    return _.keys(this._nodes);\n  }\n  sources() {\n    var self = this;\n    return _.filter(this.nodes(), function (v) {\n      return _.isEmpty(self._in[v]);\n    });\n  }\n  sinks() {\n    var self = this;\n    return _.filter(this.nodes(), function (v) {\n      return _.isEmpty(self._out[v]);\n    });\n  }\n  setNodes(vs, value) {\n    var args = arguments;\n    var self = this;\n    _.each(vs, function (v) {\n      if (args.length > 1) {\n        self.setNode(v, value);\n      } else {\n        self.setNode(v);\n      }\n    });\n    return this;\n  }\n  setNode(v, value) {\n    if (_.has(this._nodes, v)) {\n      if (arguments.length > 1) {\n        this._nodes[v] = value;\n      }\n      return this;\n    }\n\n    // @ts-expect-error\n    this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);\n    if (this._isCompound) {\n      this._parent[v] = GRAPH_NODE;\n      this._children[v] = {};\n      this._children[GRAPH_NODE][v] = true;\n    }\n    this._in[v] = {};\n    this._preds[v] = {};\n    this._out[v] = {};\n    this._sucs[v] = {};\n    ++this._nodeCount;\n    return this;\n  }\n  node(v) {\n    return this._nodes[v];\n  }\n  hasNode(v) {\n    return _.has(this._nodes, v);\n  }\n  removeNode(v) {\n    var self = this;\n    if (_.has(this._nodes, v)) {\n      var removeEdge = function (e) {\n        self.removeEdge(self._edgeObjs[e]);\n      };\n      delete this._nodes[v];\n      if (this._isCompound) {\n        this._removeFromParentsChildList(v);\n        delete this._parent[v];\n        _.each(this.children(v), function (child) {\n          self.setParent(child);\n        });\n        delete this._children[v];\n      }\n      _.each(_.keys(this._in[v]), removeEdge);\n      delete this._in[v];\n      delete this._preds[v];\n      _.each(_.keys(this._out[v]), removeEdge);\n      delete this._out[v];\n      delete this._sucs[v];\n      --this._nodeCount;\n    }\n    return this;\n  }\n  setParent(v, parent) {\n    if (!this._isCompound) {\n      throw new Error('Cannot set parent in a non-compound graph');\n    }\n\n    if (_.isUndefined(parent)) {\n      parent = GRAPH_NODE;\n    } else {\n      // Coerce parent to string\n      parent += '';\n      for (var ancestor = parent; !_.isUndefined(ancestor); ancestor = this.parent(ancestor)) {\n        if (ancestor === v) {\n          throw new Error('Setting ' + parent + ' as parent of ' + v + ' would create a cycle');\n        }\n      }\n\n      this.setNode(parent);\n    }\n\n    this.setNode(v);\n    this._removeFromParentsChildList(v);\n    this._parent[v] = parent;\n    this._children[parent][v] = true;\n    return this;\n  }\n  _removeFromParentsChildList(v) {\n    delete this._children[this._parent[v]][v];\n  }\n  parent(v) {\n    if (this._isCompound) {\n      var parent = this._parent[v];\n      if (parent !== GRAPH_NODE) {\n        return parent;\n      }\n    }\n  }\n  children(v) {\n    if (_.isUndefined(v)) {\n      v = GRAPH_NODE;\n    }\n\n    if (this._isCompound) {\n      var children = this._children[v];\n      if (children) {\n        return _.keys(children);\n      }\n    } else if (v === GRAPH_NODE) {\n      return this.nodes();\n    } else if (this.hasNode(v)) {\n      return [];\n    }\n  }\n  predecessors(v) {\n    var predsV = this._preds[v];\n    if (predsV) {\n      return _.keys(predsV);\n    }\n  }\n  successors(v) {\n    var sucsV = this._sucs[v];\n    if (sucsV) {\n      return _.keys(sucsV);\n    }\n  }\n  neighbors(v) {\n    var preds = this.predecessors(v);\n    if (preds) {\n      return _.union(preds, this.successors(v));\n    }\n  }\n  isLeaf(v) {\n    var neighbors;\n    if (this.isDirected()) {\n      neighbors = this.successors(v);\n    } else {\n      neighbors = this.neighbors(v);\n    }\n    return neighbors.length === 0;\n  }\n  filterNodes(filter) {\n    // @ts-expect-error\n    var copy = new this.constructor({\n      directed: this._isDirected,\n      multigraph: this._isMultigraph,\n      compound: this._isCompound,\n    });\n\n    copy.setGraph(this.graph());\n\n    var self = this;\n    _.each(this._nodes, function (value, v) {\n      if (filter(v)) {\n        copy.setNode(v, value);\n      }\n    });\n\n    _.each(this._edgeObjs, function (e) {\n      // @ts-expect-error\n      if (copy.hasNode(e.v) && copy.hasNode(e.w)) {\n        copy.setEdge(e, self.edge(e));\n      }\n    });\n\n    var parents = {};\n    function findParent(v) {\n      var parent = self.parent(v);\n      if (parent === undefined || copy.hasNode(parent)) {\n        parents[v] = parent;\n        return parent;\n      } else if (parent in parents) {\n        return parents[parent];\n      } else {\n        return findParent(parent);\n      }\n    }\n\n    if (this._isCompound) {\n      _.each(copy.nodes(), function (v) {\n        copy.setParent(v, findParent(v));\n      });\n    }\n\n    return copy;\n  }\n  /* === Edge functions ========== */\n  setDefaultEdgeLabel(newDefault) {\n    if (!_.isFunction(newDefault)) {\n      newDefault = _.constant(newDefault);\n    }\n    this._defaultEdgeLabelFn = newDefault;\n    return this;\n  }\n  edgeCount() {\n    return this._edgeCount;\n  }\n  edges() {\n    return _.values(this._edgeObjs);\n  }\n  setPath(vs, value) {\n    var self = this;\n    var args = arguments;\n    _.reduce(vs, function (v, w) {\n      if (args.length > 1) {\n        self.setEdge(v, w, value);\n      } else {\n        self.setEdge(v, w);\n      }\n      return w;\n    });\n    return this;\n  }\n  /*\n   * setEdge(v, w, [value, [name]])\n   * setEdge({ v, w, [name] }, [value])\n   */\n  setEdge() {\n    var v, w, name, value;\n    var valueSpecified = false;\n    var arg0 = arguments[0];\n\n    if (typeof arg0 === 'object' && arg0 !== null && 'v' in arg0) {\n      v = arg0.v;\n      w = arg0.w;\n      name = arg0.name;\n      if (arguments.length === 2) {\n        value = arguments[1];\n        valueSpecified = true;\n      }\n    } else {\n      v = arg0;\n      w = arguments[1];\n      name = arguments[3];\n      if (arguments.length > 2) {\n        value = arguments[2];\n        valueSpecified = true;\n      }\n    }\n\n    v = '' + v;\n    w = '' + w;\n    if (!_.isUndefined(name)) {\n      name = '' + name;\n    }\n\n    var e = edgeArgsToId(this._isDirected, v, w, name);\n    if (_.has(this._edgeLabels, e)) {\n      if (valueSpecified) {\n        this._edgeLabels[e] = value;\n      }\n      return this;\n    }\n\n    if (!_.isUndefined(name) && !this._isMultigraph) {\n      throw new Error('Cannot set a named edge when isMultigraph = false');\n    }\n\n    // It didn't exist, so we need to create it.\n    // First ensure the nodes exist.\n    this.setNode(v);\n    this.setNode(w);\n\n    // @ts-expect-error\n    this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);\n\n    var edgeObj = edgeArgsToObj(this._isDirected, v, w, name);\n    // Ensure we add undirected edges in a consistent way.\n    v = edgeObj.v;\n    w = edgeObj.w;\n\n    Object.freeze(edgeObj);\n    this._edgeObjs[e] = edgeObj;\n    incrementOrInitEntry(this._preds[w], v);\n    incrementOrInitEntry(this._sucs[v], w);\n    this._in[w][e] = edgeObj;\n    this._out[v][e] = edgeObj;\n    this._edgeCount++;\n    return this;\n  }\n  edge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    return this._edgeLabels[e];\n  }\n  hasEdge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    return _.has(this._edgeLabels, e);\n  }\n  removeEdge(v, w, name) {\n    var e =\n      arguments.length === 1\n        ? edgeObjToId(this._isDirected, arguments[0])\n        : edgeArgsToId(this._isDirected, v, w, name);\n    var edge = this._edgeObjs[e];\n    if (edge) {\n      v = edge.v;\n      w = edge.w;\n      delete this._edgeLabels[e];\n      delete this._edgeObjs[e];\n      decrementOrRemoveEntry(this._preds[w], v);\n      decrementOrRemoveEntry(this._sucs[v], w);\n      delete this._in[w][e];\n      delete this._out[v][e];\n      this._edgeCount--;\n    }\n    return this;\n  }\n  inEdges(v, u) {\n    var inV = this._in[v];\n    if (inV) {\n      var edges = _.values(inV);\n      if (!u) {\n        return edges;\n      }\n      return _.filter(edges, function (edge) {\n        return edge.v === u;\n      });\n    }\n  }\n  outEdges(v, w) {\n    var outV = this._out[v];\n    if (outV) {\n      var edges = _.values(outV);\n      if (!w) {\n        return edges;\n      }\n      return _.filter(edges, function (edge) {\n        return edge.w === w;\n      });\n    }\n  }\n  nodeEdges(v, w) {\n    var inEdges = this.inEdges(v, w);\n    if (inEdges) {\n      return inEdges.concat(this.outEdges(v, w));\n    }\n  }\n}\n\n/* Number of nodes in the graph. Should only be changed by the implementation. */\nGraph.prototype._nodeCount = 0;\n\n/* Number of edges in the graph. Should only be changed by the implementation. */\nGraph.prototype._edgeCount = 0;\n\nfunction incrementOrInitEntry(map, k) {\n  if (map[k]) {\n    map[k]++;\n  } else {\n    map[k] = 1;\n  }\n}\n\nfunction decrementOrRemoveEntry(map, k) {\n  if (!--map[k]) {\n    delete map[k];\n  }\n}\n\nfunction edgeArgsToId(isDirected, v_, w_, name) {\n  var v = '' + v_;\n  var w = '' + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM + (_.isUndefined(name) ? DEFAULT_EDGE_NAME : name);\n}\n\nfunction edgeArgsToObj(isDirected, v_, w_, name) {\n  var v = '' + v_;\n  var w = '' + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  var edgeObj = { v: v, w: w };\n  if (name) {\n    edgeObj.name = name;\n  }\n  return edgeObj;\n}\n\nfunction edgeObjToId(isDirected, edgeObj) {\n  return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);\n}\n","import copyObject from './_copyObject.js';\nimport keys from './keys.js';\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\nexport default baseAssign;\n","import copyObject from './_copyObject.js';\nimport keysIn from './keysIn.js';\n\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssignIn(object, source) {\n  return object && copyObject(source, keysIn(source), object);\n}\n\nexport default baseAssignIn;\n","import copyObject from './_copyObject.js';\nimport getSymbols from './_getSymbols.js';\n\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\nexport default copySymbols;\n","import arrayPush from './_arrayPush.js';\nimport getPrototype from './_getPrototype.js';\nimport getSymbols from './_getSymbols.js';\nimport stubArray from './stubArray.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\nexport default getSymbolsIn;\n","import copyObject from './_copyObject.js';\nimport getSymbolsIn from './_getSymbolsIn.js';\n\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbolsIn(source, object) {\n  return copyObject(source, getSymbolsIn(source), object);\n}\n\nexport default copySymbolsIn;\n","import baseGetAllKeys from './_baseGetAllKeys.js';\nimport getSymbolsIn from './_getSymbolsIn.js';\nimport keysIn from './keysIn.js';\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\nexport default getAllKeysIn;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = new array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\nexport default initCloneArray;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nexport default cloneDataView;\n","/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nexport default cloneRegExp;\n","import Symbol from './_Symbol.js';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nexport default cloneSymbol;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\nimport cloneDataView from './_cloneDataView.js';\nimport cloneRegExp from './_cloneRegExp.js';\nimport cloneSymbol from './_cloneSymbol.js';\nimport cloneTypedArray from './_cloneTypedArray.js';\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return new Ctor;\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return new Ctor;\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nexport default initCloneByTag;\n","import getTag from './_getTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]';\n\n/**\n * The base implementation of `_.isMap` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n */\nfunction baseIsMap(value) {\n  return isObjectLike(value) && getTag(value) == mapTag;\n}\n\nexport default baseIsMap;\n","import baseIsMap from './_baseIsMap.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsMap = nodeUtil && nodeUtil.isMap;\n\n/**\n * Checks if `value` is classified as a `Map` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n * @example\n *\n * _.isMap(new Map);\n * // => true\n *\n * _.isMap(new WeakMap);\n * // => false\n */\nvar isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\nexport default isMap;\n","import getTag from './_getTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar setTag = '[object Set]';\n\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */\nfunction baseIsSet(value) {\n  return isObjectLike(value) && getTag(value) == setTag;\n}\n\nexport default baseIsSet;\n","import baseIsSet from './_baseIsSet.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsSet = nodeUtil && nodeUtil.isSet;\n\n/**\n * Checks if `value` is classified as a `Set` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * _.isSet(new Set);\n * // => true\n *\n * _.isSet(new WeakSet);\n * // => false\n */\nvar isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\nexport default isSet;\n","import Stack from './_Stack.js';\nimport arrayEach from './_arrayEach.js';\nimport assignValue from './_assignValue.js';\nimport baseAssign from './_baseAssign.js';\nimport baseAssignIn from './_baseAssignIn.js';\nimport cloneBuffer from './_cloneBuffer.js';\nimport copyArray from './_copyArray.js';\nimport copySymbols from './_copySymbols.js';\nimport copySymbolsIn from './_copySymbolsIn.js';\nimport getAllKeys from './_getAllKeys.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\nimport getTag from './_getTag.js';\nimport initCloneArray from './_initCloneArray.js';\nimport initCloneByTag from './_initCloneByTag.js';\nimport initCloneObject from './_initCloneObject.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isMap from './isMap.js';\nimport isObject from './isObject.js';\nimport isSet from './isSet.js';\nimport keys from './keys.js';\nimport keysIn from './keysIn.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nexport default baseClone;\n","import baseRest from './_baseRest.js';\nimport eq from './eq.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport keysIn from './keysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaultsDeep\n * @example\n *\n * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\nvar defaults = baseRest(function(object, sources) {\n  object = Object(object);\n\n  var index = -1;\n  var length = sources.length;\n  var guard = length > 2 ? sources[2] : undefined;\n\n  if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n    length = 1;\n  }\n\n  while (++index < length) {\n    var source = sources[index];\n    var props = keysIn(source);\n    var propsIndex = -1;\n    var propsLength = props.length;\n\n    while (++propsIndex < propsLength) {\n      var key = props[propsIndex];\n      var value = object[key];\n\n      if (value === undefined ||\n          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        object[key] = source[key];\n      }\n    }\n  }\n\n  return object;\n});\n\nexport default defaults;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.has` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHas(object, key) {\n  return object != null && hasOwnProperty.call(object, key);\n}\n\nexport default baseHas;\n","import baseHas from './_baseHas.js';\nimport hasPath from './_hasPath.js';\n\n/**\n * Checks if `path` is a direct property of `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = { 'a': { 'b': 2 } };\n * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.has(object, 'a');\n * // => true\n *\n * _.has(object, 'a.b');\n * // => true\n *\n * _.has(object, ['a', 'b']);\n * // => true\n *\n * _.has(other, 'a');\n * // => false\n */\nfunction has(object, path) {\n  return object != null && hasPath(object, path, baseHas);\n}\n\nexport default has;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n/**\n * The base implementation of `_.range` and `_.rangeRight` which doesn't\n * coerce arguments.\n *\n * @private\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @param {number} step The value to increment or decrement by.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the range of numbers.\n */\nfunction baseRange(start, end, step, fromRight) {\n  var index = -1,\n      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),\n      result = Array(length);\n\n  while (length--) {\n    result[fromRight ? length : ++index] = start;\n    start += step;\n  }\n  return result;\n}\n\nexport default baseRange;\n","import baseRange from './_baseRange.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport toFinite from './toFinite.js';\n\n/**\n * Creates a `_.range` or `_.rangeRight` function.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new range function.\n */\nfunction createRange(fromRight) {\n  return function(start, end, step) {\n    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {\n      end = step = undefined;\n    }\n    // Ensure the sign of `-0` is preserved.\n    start = toFinite(start);\n    if (end === undefined) {\n      end = start;\n      start = 0;\n    } else {\n      end = toFinite(end);\n    }\n    step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);\n    return baseRange(start, end, step, fromRight);\n  };\n}\n\nexport default createRange;\n","import createRange from './_createRange.js';\n\n/**\n * Creates an array of numbers (positive and/or negative) progressing from\n * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n * `start` is specified without an `end` or `step`. If `end` is not specified,\n * it's set to `start` with `start` then set to `0`.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @param {number} [step=1] The value to increment or decrement by.\n * @returns {Array} Returns the range of numbers.\n * @see _.inRange, _.rangeRight\n * @example\n *\n * _.range(4);\n * // => [0, 1, 2, 3]\n *\n * _.range(-4);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 5);\n * // => [1, 2, 3, 4]\n *\n * _.range(0, 20, 5);\n * // => [0, 5, 10, 15]\n *\n * _.range(0, -4, -1);\n * // => [0, -1, -2, -3]\n *\n * _.range(1, 4, 0);\n * // => [1, 1, 1]\n *\n * _.range(0);\n * // => []\n */\nvar range = createRange();\n\nexport default range;\n","import toString from './toString.js';\n\n/** Used to generate unique IDs. */\nvar idCounter = 0;\n\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @example\n *\n * _.uniqueId('contact_');\n * // => 'contact_104'\n *\n * _.uniqueId();\n * // => '105'\n */\nfunction uniqueId(prefix) {\n  var id = ++idCounter;\n  return toString(prefix) + id;\n}\n\nexport default uniqueId;\n"],"names":["List","_classCallCheck","sentinel","_next","_prev","this","_sentinel","_createClass","key","value","entry","unlink","strs","curr","push","JSON","stringify","filterOutLinks","join","k","v","DEFAULT_WEIGHT_FN","_","greedyFAS","g","weightFn","nodeCount","state","fasGraph","Graph","maxIn","maxOut","nodes","setNode","in","out","edges","e","prevWeight","edge","w","weight","edgeWeight","setEdge","Math","max","node","buckets","map","zeroIdx","assignBucket","graph","buildState","results","sources","length","sinks","dequeue","removeNode","i","concat","doGreedyFAS","outEdges","collectPredecessors","undefined","inEdges","uEntry","wEntry","enqueue","run","fas","acyclicer","stack","visited","dfs","dfsFAS","label","removeEdge","forwardName","name","reversed","array","iteratee","comparator","index","current","computed","isSymbol","result","other","baseExtremum","identity","baseGt","object","baseIteratee","baseForOwn","baseAssignValue","baseLt","root","Date","now","addDummyNode","type","attrs","hasNode","dummy","asNonCompoundGraph","simplified","multigraph","isMultigraph","setGraph","children","intersectRect","rect","point","sx","sy","x","y","dx","dy","width","h","height","Error","abs","buildLayerMatrix","layering","maxRank","rank","order","addBorderNode","prefix","arguments","time","fn","start","console","log","notime","prop","sg","sgNode","borderType","prev","util","setParent","undo","rankDir","rankdir","toLowerCase","reverseYOne","points","reverseY","swapXYOne","swapXY","swapWidthHeight","swapWidthHeightOne","dummyChains","vRank","wRank","edgeLabel","labelRank","edgeObj","labelpos","normalizeEdge","longestPath","minlen","Number","POSITIVE_INFINITY","slack","feasibleTree","delta","t","directed","size","tightTree","findMinSlackEdge","shiftRanks","nodeEdges","edgeV","CycleException","prototype","vs","navigation","isDirected","successors","neighbors","bind","acc","doDfs","postorder","networkSimplex","simpleLabel","simplify","initLowLimValues","initCutValues","leaveEdge","exchangeEdges","enterEdge","alg","slice","child","childLab","parent","cutvalue","calcCutValue","assignCutValue","childIsTail","graphEdge","cutValue","u","isOutEdge","pointsToHead","otherWeight","hasEdge","otherCutValue","tree","dfsAssignLowLim","nextLim","low","lim","vLabel","wLabel","tailLabel","flip","candidates","isDescendant","f","flipped","updateRanks","rootLabel","ranker","networkSimplexRanker","tightTreeRanker","longestPathRanker","depths","depth","treeDepths","nodeSep","nestingRoot","sumWeights","nodeRankFactor","top","bottom","borderTop","borderBottom","childNode","childTop","childBottom","thisWeight","nestingEdge","baseClone","CLONE_DEEP_FLAG","buildLayerGraph","relationship","createRootNode","compound","setDefaultNodeLabel","minRank","borderLeft","borderRight","props","values","assignFunc","valsLength","baseZipObject","assignValue","comparer","sort","valIsDefined","valIsNull","valIsReflexive","valIsSymbol","othIsDefined","othIsNull","othIsReflexive","othIsSymbol","orders","objCriteria","criteria","othCriteria","ordersLength","compareAscending","collection","iteratees","arrayMap","isArray","baseGet","baseUnary","baseMap","baseSortBy","compareMultiple","baseRest","isIterateeCall","baseOrderBy","baseFlatten","crossCount","cc","twoLayerCrossCount","northLayer","southLayer","southPos","southEntries","pos","firstIndex","treeSize","Array","forEach","weightSum","resolveConflicts","entries","cg","mappedEntries","tmp","indegree","barycenter","entryV","entryW","sourceSet","handleIn","vEntry","merged","target","source","sum","min","mergeEntries","handleOut","pop","reverse","doResolveConflicts","biasRight","bias","parts","lhs","rhs","sortable","unsortable","vsIndex","consumeUnsortable","last","sortSubgraph","movable","bl","br","subgraphs","barycenters","inV","nodeU","subgraphResult","expandSubgraphs","predecessors","blPred","brPred","downLayerGraphs","buildLayerGraphs","upLayerGraphs","simpleNodes","layers","orderedVs","initOrder","assignOrder","best","bestCC","lastBest","sweepLayerGraphs","ranks","layerGraphs","lg","sorted","rootPrev","prevChild","addSubgraphConstraints","layer","parentDummyChains","postorderNums","pathData","lca","vPath","wPath","path","findPath","pathIdx","pathV","ascending","castFunction","baseFor","keysIn","findType1Conflicts","conflicts","prevLayer","k0","scanPos","prevLayerLength","lastNode","findOtherInnerSegmentNode","k1","scanNode","uLabel","uPos","addConflict","conflictsV","hasConflict","horizontalCompaction","align","reverseSep","xs","blockG","blockGraph","graphLabel","sepFn","edgeSep","sep","nodesep","edgesep","vRoot","uRoot","prevMax","buildBlockGraph","iterate","setXsFunc","nextNodesFunc","elem","reduce","positionX","adjustedLayering","scan","south","southEnd","prevNorthBorder","nextNorthBorder","uNode","north","nextNorthPos","prevNorthPos","southLookahead","findType2Conflicts","xss","vert","horiz","inner","neighborFn","prevIdx","ws","mp","floor","il","ceil","verticalAlignment","smallestWidth","NEGATIVE_INFINITY","halfWidth","findSmallestWidthAlignment","alignTo","alignToVals","alignToMin","alignToMax","alignment","xsVals","alignCoordinates","ul","ignore","balance","position","rankSep","ranksep","prevY","maxHeight","positionY","layout","opts","debugTiming","layoutGraph","inputGraph","canonicalize","graphDefaults","selectNumberAttrs","graphNumAttrs","graphAttrs","nodeNumAttrs","nodeDefaults","edgeDefaults","edgeNumAttrs","edgeAttrs","buildLayoutGraph","labeloffset","makeSpaceForEdgeLabels","selfEdges","removeSelfEdges","acyclic","nestingGraph","injectEdgeLabelProxies","offset","assignRankMinMax","removeEdgeLabelProxies","normalize","addBorderSegments","orderShift","selfEdge","insertSelfEdges","coordinateSystem","selfNode","positionSelfEdges","b","l","r","removeBorderNodes","origLabel","fixupEdgeLabelCoords","minX","maxX","minY","maxY","marginX","marginx","marginY","marginy","getExtremes","p","translateGraph","p1","p2","nodeV","nodeW","unshift","assignNodeIntersects","reversePointsForReversedEdges","runLayout","inputLabel","layoutLabel","updateInputGraph","obj","newAttrs","DEFAULT_EDGE_NAME","GRAPH_NODE","EDGE_KEY_DELIM","_isDirected","_isMultigraph","_isCompound","_label","_defaultNodeLabelFn","_defaultEdgeLabelFn","_nodes","_parent","_children","_in","_preds","_out","_sucs","_edgeObjs","_edgeLabels","newDefault","_nodeCount","self","args","_removeFromParentsChildList","ancestor","predsV","sucsV","preds","filter","copy","constructor","parents","findParent","_edgeCount","valueSpecified","arg0","edgeArgsToId","v_","w_","edgeArgsToObj","Object","freeze","incrementOrInitEntry","edgeObjToId","decrementOrRemoveEntry","outV","copyObject","keys","getSymbols","getOwnPropertySymbols","arrayPush","getPrototype","stubArray","getSymbolsIn","baseGetAllKeys","hasOwnProperty","call","input","dataView","isDeep","buffer","cloneArrayBuffer","byteOffset","byteLength","reFlags","regexp","exec","lastIndex","symbolProto","Symbol","symbolValueOf","valueOf","symbol","tag","Ctor","cloneDataView","cloneTypedArray","cloneRegExp","cloneSymbol","isObjectLike","getTag","nodeIsMap","nodeUtil","isMap","baseIsMap","nodeIsSet","isSet","baseIsSet","argsTag","funcTag","objectTag","cloneableTags","bitmask","customizer","isFlat","isFull","isObject","isArr","initCloneArray","copyArray","isFunc","isBuffer","cloneBuffer","initCloneObject","copySymbolsIn","baseAssignIn","copySymbols","baseAssign","initCloneByTag","Stack","stacked","get","set","subValue","add","keysFunc","getAllKeysIn","getAllKeys","arrayEach","objectProto","defaults","guard","propsIndex","propsLength","eq","hasPath","baseHas","nativeCeil","nativeMax","end","step","fromRight","toFinite","baseRange","createRange","idCounter","id","toString"],"sourceRoot":""}