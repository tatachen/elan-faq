{"version":3,"file":"static/js/731.b4e718ae.chunk.js","mappings":"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","sources":["../node_modules/dagre-d3-es/src/dagre-js/label/add-html-label.js","../node_modules/dagre-d3-es/src/dagre-js/util.js","../node_modules/khroma/dist/methods/channel.js","../node_modules/mermaid/dist/styles-b966c4ae.js"],"sourcesContent":["import * as util from '../util.js';\n\nexport { addHtmlLabel };\n\nfunction addHtmlLabel(root, node) {\n  var fo = root.append('foreignObject').attr('width', '100000');\n\n  var div = fo.append('xhtml:div');\n  div.attr('xmlns', 'http://www.w3.org/1999/xhtml');\n\n  var label = node.label;\n  switch (typeof label) {\n    case 'function':\n      div.insert(label);\n      break;\n    case 'object':\n      // Currently we assume this is a DOM object.\n      div.insert(function () {\n        return label;\n      });\n      break;\n    default:\n      div.html(label);\n  }\n\n  util.applyStyle(div, node.labelStyle);\n  div.style('display', 'inline-block');\n  // Fix for firefox\n  div.style('white-space', 'nowrap');\n\n  var client = div.node().getBoundingClientRect();\n  fo.attr('width', client.width).attr('height', client.height);\n\n  return fo;\n}\n","import * as _ from 'lodash-es';\n\n// Public utility functions\nexport { isSubgraph, edgeToId, applyStyle, applyClass, applyTransition };\n\n/*\n * Returns true if the specified node in the graph is a subgraph node. A\n * subgraph node is one that contains other nodes.\n */\nfunction isSubgraph(g, v) {\n  return !!g.children(v).length;\n}\n\nfunction edgeToId(e) {\n  return escapeId(e.v) + ':' + escapeId(e.w) + ':' + escapeId(e.name);\n}\n\nvar ID_DELIM = /:/g;\nfunction escapeId(str) {\n  return str ? String(str).replace(ID_DELIM, '\\\\:') : '';\n}\n\nfunction applyStyle(dom, styleFn) {\n  if (styleFn) {\n    dom.attr('style', styleFn);\n  }\n}\n\nfunction applyClass(dom, classFn, otherClasses) {\n  if (classFn) {\n    dom.attr('class', classFn).attr('class', otherClasses + ' ' + dom.attr('class'));\n  }\n}\n\nfunction applyTransition(selection, g) {\n  var graph = g.graph();\n\n  if (_.isPlainObject(graph)) {\n    var transition = graph.transition;\n    if (_.isFunction(transition)) {\n      return transition(selection);\n    }\n  }\n\n  return selection;\n}\n","/* IMPORT */\nimport _ from '../utils/index.js';\nimport Color from '../color/index.js';\n/* MAIN */\nconst channel = (color, channel) => {\n    return _.lang.round(Color.parse(color)[channel]);\n};\n/* EXPORT */\nexport default channel;\n","import * as graphlib from \"dagre-d3-es/src/graphlib/index.js\";\nimport { curveLinear, select, selectAll } from \"d3\";\nimport { k as getStylesFromArray, l as log, m as evaluate, c as getConfig, e as common, n as interpolateToCurve, u as utils, o as setupGraphViewbox } from \"./mermaid-934d9bea.js\";\nimport { r as render } from \"./index-67a42d7d.js\";\nimport { addHtmlLabel } from \"dagre-d3-es/src/dagre-js/label/add-html-label.js\";\nimport * as khroma from \"khroma\";\nconst conf = {};\nconst setConf = function(cnf) {\n  const keys = Object.keys(cnf);\n  for (const key of keys) {\n    conf[key] = cnf[key];\n  }\n};\nconst addVertices = function(vert, g, svgId, root, doc, diagObj) {\n  const svg = root.select(`[id=\"${svgId}\"]`);\n  const keys = Object.keys(vert);\n  keys.forEach(function(id) {\n    const vertex = vert[id];\n    let classStr = \"default\";\n    if (vertex.classes.length > 0) {\n      classStr = vertex.classes.join(\" \");\n    }\n    classStr = classStr + \" flowchart-label\";\n    const styles = getStylesFromArray(vertex.styles);\n    let vertexText = vertex.text !== void 0 ? vertex.text : vertex.id;\n    let vertexNode;\n    log.info(\"vertex\", vertex, vertex.labelType);\n    if (vertex.labelType === \"markdown\") {\n      log.info(\"vertex\", vertex, vertex.labelType);\n    } else {\n      if (evaluate(getConfig().flowchart.htmlLabels)) {\n        const node = {\n          label: vertexText.replace(\n            /fa[blrs]?:fa-[\\w-]+/g,\n            (s) => `<i class='${s.replace(\":\", \" \")}'></i>`\n          )\n        };\n        vertexNode = addHtmlLabel(svg, node).node();\n        vertexNode.parentNode.removeChild(vertexNode);\n      } else {\n        const svgLabel = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n        svgLabel.setAttribute(\"style\", styles.labelStyle.replace(\"color:\", \"fill:\"));\n        const rows = vertexText.split(common.lineBreakRegex);\n        for (const row of rows) {\n          const tspan = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"tspan\");\n          tspan.setAttributeNS(\"http://www.w3.org/XML/1998/namespace\", \"xml:space\", \"preserve\");\n          tspan.setAttribute(\"dy\", \"1em\");\n          tspan.setAttribute(\"x\", \"1\");\n          tspan.textContent = row;\n          svgLabel.appendChild(tspan);\n        }\n        vertexNode = svgLabel;\n      }\n    }\n    let radious = 0;\n    let _shape = \"\";\n    switch (vertex.type) {\n      case \"round\":\n        radious = 5;\n        _shape = \"rect\";\n        break;\n      case \"square\":\n        _shape = \"rect\";\n        break;\n      case \"diamond\":\n        _shape = \"question\";\n        break;\n      case \"hexagon\":\n        _shape = \"hexagon\";\n        break;\n      case \"odd\":\n        _shape = \"rect_left_inv_arrow\";\n        break;\n      case \"lean_right\":\n        _shape = \"lean_right\";\n        break;\n      case \"lean_left\":\n        _shape = \"lean_left\";\n        break;\n      case \"trapezoid\":\n        _shape = \"trapezoid\";\n        break;\n      case \"inv_trapezoid\":\n        _shape = \"inv_trapezoid\";\n        break;\n      case \"odd_right\":\n        _shape = \"rect_left_inv_arrow\";\n        break;\n      case \"circle\":\n        _shape = \"circle\";\n        break;\n      case \"ellipse\":\n        _shape = \"ellipse\";\n        break;\n      case \"stadium\":\n        _shape = \"stadium\";\n        break;\n      case \"subroutine\":\n        _shape = \"subroutine\";\n        break;\n      case \"cylinder\":\n        _shape = \"cylinder\";\n        break;\n      case \"group\":\n        _shape = \"rect\";\n        break;\n      case \"doublecircle\":\n        _shape = \"doublecircle\";\n        break;\n      default:\n        _shape = \"rect\";\n    }\n    g.setNode(vertex.id, {\n      labelStyle: styles.labelStyle,\n      shape: _shape,\n      labelText: vertexText,\n      labelType: vertex.labelType,\n      rx: radious,\n      ry: radious,\n      class: classStr,\n      style: styles.style,\n      id: vertex.id,\n      link: vertex.link,\n      linkTarget: vertex.linkTarget,\n      tooltip: diagObj.db.getTooltip(vertex.id) || \"\",\n      domId: diagObj.db.lookUpDomId(vertex.id),\n      haveCallback: vertex.haveCallback,\n      width: vertex.type === \"group\" ? 500 : void 0,\n      dir: vertex.dir,\n      type: vertex.type,\n      props: vertex.props,\n      padding: getConfig().flowchart.padding\n    });\n    log.info(\"setNode\", {\n      labelStyle: styles.labelStyle,\n      labelType: vertex.labelType,\n      shape: _shape,\n      labelText: vertexText,\n      rx: radious,\n      ry: radious,\n      class: classStr,\n      style: styles.style,\n      id: vertex.id,\n      domId: diagObj.db.lookUpDomId(vertex.id),\n      width: vertex.type === \"group\" ? 500 : void 0,\n      type: vertex.type,\n      dir: vertex.dir,\n      props: vertex.props,\n      padding: getConfig().flowchart.padding\n    });\n  });\n};\nconst addEdges = function(edges, g, diagObj) {\n  log.info(\"abc78 edges = \", edges);\n  let cnt = 0;\n  let linkIdCnt = {};\n  let defaultStyle;\n  let defaultLabelStyle;\n  if (edges.defaultStyle !== void 0) {\n    const defaultStyles = getStylesFromArray(edges.defaultStyle);\n    defaultStyle = defaultStyles.style;\n    defaultLabelStyle = defaultStyles.labelStyle;\n  }\n  edges.forEach(function(edge) {\n    cnt++;\n    const linkIdBase = \"L-\" + edge.start + \"-\" + edge.end;\n    if (linkIdCnt[linkIdBase] === void 0) {\n      linkIdCnt[linkIdBase] = 0;\n      log.info(\"abc78 new entry\", linkIdBase, linkIdCnt[linkIdBase]);\n    } else {\n      linkIdCnt[linkIdBase]++;\n      log.info(\"abc78 new entry\", linkIdBase, linkIdCnt[linkIdBase]);\n    }\n    let linkId = linkIdBase + \"-\" + linkIdCnt[linkIdBase];\n    log.info(\"abc78 new link id to be used is\", linkIdBase, linkId, linkIdCnt[linkIdBase]);\n    const linkNameStart = \"LS-\" + edge.start;\n    const linkNameEnd = \"LE-\" + edge.end;\n    const edgeData = { style: \"\", labelStyle: \"\" };\n    edgeData.minlen = edge.length || 1;\n    if (edge.type === \"arrow_open\") {\n      edgeData.arrowhead = \"none\";\n    } else {\n      edgeData.arrowhead = \"normal\";\n    }\n    edgeData.arrowTypeStart = \"arrow_open\";\n    edgeData.arrowTypeEnd = \"arrow_open\";\n    switch (edge.type) {\n      case \"double_arrow_cross\":\n        edgeData.arrowTypeStart = \"arrow_cross\";\n      case \"arrow_cross\":\n        edgeData.arrowTypeEnd = \"arrow_cross\";\n        break;\n      case \"double_arrow_point\":\n        edgeData.arrowTypeStart = \"arrow_point\";\n      case \"arrow_point\":\n        edgeData.arrowTypeEnd = \"arrow_point\";\n        break;\n      case \"double_arrow_circle\":\n        edgeData.arrowTypeStart = \"arrow_circle\";\n      case \"arrow_circle\":\n        edgeData.arrowTypeEnd = \"arrow_circle\";\n        break;\n    }\n    let style = \"\";\n    let labelStyle = \"\";\n    switch (edge.stroke) {\n      case \"normal\":\n        style = \"fill:none;\";\n        if (defaultStyle !== void 0) {\n          style = defaultStyle;\n        }\n        if (defaultLabelStyle !== void 0) {\n          labelStyle = defaultLabelStyle;\n        }\n        edgeData.thickness = \"normal\";\n        edgeData.pattern = \"solid\";\n        break;\n      case \"dotted\":\n        edgeData.thickness = \"normal\";\n        edgeData.pattern = \"dotted\";\n        edgeData.style = \"fill:none;stroke-width:2px;stroke-dasharray:3;\";\n        break;\n      case \"thick\":\n        edgeData.thickness = \"thick\";\n        edgeData.pattern = \"solid\";\n        edgeData.style = \"stroke-width: 3.5px;fill:none;\";\n        break;\n      case \"invisible\":\n        edgeData.thickness = \"invisible\";\n        edgeData.pattern = \"solid\";\n        edgeData.style = \"stroke-width: 0;fill:none;\";\n        break;\n    }\n    if (edge.style !== void 0) {\n      const styles = getStylesFromArray(edge.style);\n      style = styles.style;\n      labelStyle = styles.labelStyle;\n    }\n    edgeData.style = edgeData.style += style;\n    edgeData.labelStyle = edgeData.labelStyle += labelStyle;\n    if (edge.interpolate !== void 0) {\n      edgeData.curve = interpolateToCurve(edge.interpolate, curveLinear);\n    } else if (edges.defaultInterpolate !== void 0) {\n      edgeData.curve = interpolateToCurve(edges.defaultInterpolate, curveLinear);\n    } else {\n      edgeData.curve = interpolateToCurve(conf.curve, curveLinear);\n    }\n    if (edge.text === void 0) {\n      if (edge.style !== void 0) {\n        edgeData.arrowheadStyle = \"fill: #333\";\n      }\n    } else {\n      edgeData.arrowheadStyle = \"fill: #333\";\n      edgeData.labelpos = \"c\";\n    }\n    edgeData.labelType = edge.labelType;\n    edgeData.label = edge.text.replace(common.lineBreakRegex, \"\\n\");\n    if (edge.style === void 0) {\n      edgeData.style = edgeData.style || \"stroke: #333; stroke-width: 1.5px;fill:none;\";\n    }\n    edgeData.labelStyle = edgeData.labelStyle.replace(\"color:\", \"fill:\");\n    edgeData.id = linkId;\n    edgeData.classes = \"flowchart-link \" + linkNameStart + \" \" + linkNameEnd;\n    g.setEdge(edge.start, edge.end, edgeData, cnt);\n  });\n};\nconst getClasses = function(text, diagObj) {\n  return diagObj.db.getClasses();\n};\nconst draw = async function(text, id, _version, diagObj) {\n  log.info(\"Drawing flowchart\");\n  let dir = diagObj.db.getDirection();\n  if (dir === void 0) {\n    dir = \"TD\";\n  }\n  const { securityLevel, flowchart: conf2 } = getConfig();\n  const nodeSpacing = conf2.nodeSpacing || 50;\n  const rankSpacing = conf2.rankSpacing || 50;\n  let sandboxElement;\n  if (securityLevel === \"sandbox\") {\n    sandboxElement = select(\"#i\" + id);\n  }\n  const root = securityLevel === \"sandbox\" ? select(sandboxElement.nodes()[0].contentDocument.body) : select(\"body\");\n  const doc = securityLevel === \"sandbox\" ? sandboxElement.nodes()[0].contentDocument : document;\n  const g = new graphlib.Graph({\n    multigraph: true,\n    compound: true\n  }).setGraph({\n    rankdir: dir,\n    nodesep: nodeSpacing,\n    ranksep: rankSpacing,\n    marginx: 0,\n    marginy: 0\n  }).setDefaultEdgeLabel(function() {\n    return {};\n  });\n  let subG;\n  const subGraphs = diagObj.db.getSubGraphs();\n  log.info(\"Subgraphs - \", subGraphs);\n  for (let i2 = subGraphs.length - 1; i2 >= 0; i2--) {\n    subG = subGraphs[i2];\n    log.info(\"Subgraph - \", subG);\n    diagObj.db.addVertex(\n      subG.id,\n      { text: subG.title, type: subG.labelType },\n      \"group\",\n      void 0,\n      subG.classes,\n      subG.dir\n    );\n  }\n  const vert = diagObj.db.getVertices();\n  const edges = diagObj.db.getEdges();\n  log.info(\"Edges\", edges);\n  let i = 0;\n  for (i = subGraphs.length - 1; i >= 0; i--) {\n    subG = subGraphs[i];\n    selectAll(\"cluster\").append(\"text\");\n    for (let j = 0; j < subG.nodes.length; j++) {\n      log.info(\"Setting up subgraphs\", subG.nodes[j], subG.id);\n      g.setParent(subG.nodes[j], subG.id);\n    }\n  }\n  addVertices(vert, g, id, root, doc, diagObj);\n  addEdges(edges, g);\n  const svg = root.select(`[id=\"${id}\"]`);\n  const element = root.select(\"#\" + id + \" g\");\n  await render(element, g, [\"point\", \"circle\", \"cross\"], \"flowchart\", id);\n  utils.insertTitle(svg, \"flowchartTitleText\", conf2.titleTopMargin, diagObj.db.getDiagramTitle());\n  setupGraphViewbox(g, svg, conf2.diagramPadding, conf2.useMaxWidth);\n  diagObj.db.indexNodes(\"subGraph\" + i);\n  if (!conf2.htmlLabels) {\n    const labels = doc.querySelectorAll('[id=\"' + id + '\"] .edgeLabel .label');\n    for (const label of labels) {\n      const dim = label.getBBox();\n      const rect = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n      rect.setAttribute(\"rx\", 0);\n      rect.setAttribute(\"ry\", 0);\n      rect.setAttribute(\"width\", dim.width);\n      rect.setAttribute(\"height\", dim.height);\n      label.insertBefore(rect, label.firstChild);\n    }\n  }\n  const keys = Object.keys(vert);\n  keys.forEach(function(key) {\n    const vertex = vert[key];\n    if (vertex.link) {\n      const node = select(\"#\" + id + ' [id=\"' + key + '\"]');\n      if (node) {\n        const link = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"a\");\n        link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"class\", vertex.classes.join(\" \"));\n        link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"href\", vertex.link);\n        link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"rel\", \"noopener\");\n        if (securityLevel === \"sandbox\") {\n          link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"target\", \"_top\");\n        } else if (vertex.linkTarget) {\n          link.setAttributeNS(\"http://www.w3.org/2000/svg\", \"target\", vertex.linkTarget);\n        }\n        const linkNode = node.insert(function() {\n          return link;\n        }, \":first-child\");\n        const shape = node.select(\".label-container\");\n        if (shape) {\n          linkNode.append(function() {\n            return shape.node();\n          });\n        }\n        const label = node.select(\".label\");\n        if (label) {\n          linkNode.append(function() {\n            return label.node();\n          });\n        }\n      }\n    }\n  });\n};\nconst flowRendererV2 = {\n  setConf,\n  addVertices,\n  addEdges,\n  getClasses,\n  draw\n};\nconst fade = (color, opacity) => {\n  const channel = khroma.channel;\n  const r = channel(color, \"r\");\n  const g = channel(color, \"g\");\n  const b = channel(color, \"b\");\n  return khroma.rgba(r, g, b, opacity);\n};\nconst getStyles = (options) => `.label {\n    font-family: ${options.fontFamily};\n    color: ${options.nodeTextColor || options.textColor};\n  }\n  .cluster-label text {\n    fill: ${options.titleColor};\n  }\n  .cluster-label span,p {\n    color: ${options.titleColor};\n  }\n\n  .label text,span,p {\n    fill: ${options.nodeTextColor || options.textColor};\n    color: ${options.nodeTextColor || options.textColor};\n  }\n\n  .node rect,\n  .node circle,\n  .node ellipse,\n  .node polygon,\n  .node path {\n    fill: ${options.mainBkg};\n    stroke: ${options.nodeBorder};\n    stroke-width: 1px;\n  }\n  .flowchart-label text {\n    text-anchor: middle;\n  }\n  // .flowchart-label .text-outer-tspan {\n  //   text-anchor: middle;\n  // }\n  // .flowchart-label .text-inner-tspan {\n  //   text-anchor: start;\n  // }\n\n  .node .label {\n    text-align: center;\n  }\n  .node.clickable {\n    cursor: pointer;\n  }\n\n  .arrowheadPath {\n    fill: ${options.arrowheadColor};\n  }\n\n  .edgePath .path {\n    stroke: ${options.lineColor};\n    stroke-width: 2.0px;\n  }\n\n  .flowchart-link {\n    stroke: ${options.lineColor};\n    fill: none;\n  }\n\n  .edgeLabel {\n    background-color: ${options.edgeLabelBackground};\n    rect {\n      opacity: 0.5;\n      background-color: ${options.edgeLabelBackground};\n      fill: ${options.edgeLabelBackground};\n    }\n    text-align: center;\n  }\n\n  /* For html labels only */\n  .labelBkg {\n    background-color: ${fade(options.edgeLabelBackground, 0.5)};\n    // background-color: \n  }\n\n  .cluster rect {\n    fill: ${options.clusterBkg};\n    stroke: ${options.clusterBorder};\n    stroke-width: 1px;\n  }\n\n  .cluster text {\n    fill: ${options.titleColor};\n  }\n\n  .cluster span,p {\n    color: ${options.titleColor};\n  }\n  /* .cluster div {\n    color: ${options.titleColor};\n  } */\n\n  div.mermaidTooltip {\n    position: absolute;\n    text-align: center;\n    max-width: 200px;\n    padding: 2px;\n    font-family: ${options.fontFamily};\n    font-size: 12px;\n    background: ${options.tertiaryColor};\n    border: 1px solid ${options.border2};\n    border-radius: 2px;\n    pointer-events: none;\n    z-index: 100;\n  }\n\n  .flowchartTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${options.textColor};\n  }\n`;\nconst flowStyles = getStyles;\nexport {\n  flowStyles as a,\n  flowRendererV2 as f\n};\n"],"names":["addHtmlLabel","root","node","fo","append","attr","div","label","insert","html","util","labelStyle","style","client","getBoundingClientRect","width","height","isSubgraph","g","v","children","length","edgeToId","e","escapeId","w","name","ID_DELIM","str","String","replace","applyStyle","dom","styleFn","applyClass","classFn","otherClasses","applyTransition","selection","graph","_","transition","color","channel","lang","round","Color","parse","conf","addVertices","vert","svgId","doc","diagObj","svg","select","concat","Object","keys","forEach","id","vertex","classStr","classes","join","vertexNode","styles","getStylesFromArray","vertexText","text","log","info","labelType","evaluate","getConfig","flowchart","htmlLabels","s","parentNode","removeChild","svgLabel","createElementNS","setAttribute","_step","rows","split","common","lineBreakRegex","_iterator","_createForOfIteratorHelper","n","done","row","value","tspan","setAttributeNS","textContent","appendChild","err","f","radious","_shape","type","setNode","shape","labelText","rx","ry","class","link","linkTarget","tooltip","db","getTooltip","domId","lookUpDomId","haveCallback","dir","props","padding","addEdges","edges","defaultStyle","defaultLabelStyle","cnt","linkIdCnt","defaultStyles","edge","linkIdBase","start","end","linkId","linkNameStart","linkNameEnd","edgeData","minlen","arrowhead","arrowTypeStart","arrowTypeEnd","stroke","thickness","pattern","interpolate","curve","interpolateToCurve","curveLinear","defaultInterpolate","arrowheadStyle","labelpos","setEdge","draw","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_version","_getConfig","securityLevel","conf2","nodeSpacing","rankSpacing","sandboxElement","subG","subGraphs","i2","i","j","element","labels","_iterator2","_step2","dim","rect","wrap","_context","prev","next","getDirection","nodes","contentDocument","body","document","graphlib","multigraph","compound","setGraph","rankdir","nodesep","ranksep","marginx","marginy","setDefaultEdgeLabel","getSubGraphs","addVertex","title","getVertices","getEdges","selectAll","setParent","render","utils","insertTitle","titleTopMargin","getDiagramTitle","setupGraphViewbox","diagramPadding","useMaxWidth","indexNodes","querySelectorAll","getBBox","insertBefore","firstChild","key","linkNode","stop","_x","_x2","_x3","_x4","apply","arguments","flowRendererV2","setConf","cnf","_i","_keys","getClasses","flowStyles","options","fontFamily","nodeTextColor","textColor","titleColor","mainBkg","nodeBorder","arrowheadColor","lineColor","edgeLabelBackground","opacity","khroma","r","b","fade","clusterBkg","clusterBorder","tertiaryColor","border2"],"sourceRoot":""}